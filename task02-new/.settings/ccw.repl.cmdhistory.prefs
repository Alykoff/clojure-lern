cmdhistory=["(def re (atom {}))" "@re" "@student" "(get-table \\"student\\")" "(load-initial-data)" "@re" "(swap\! re assoc \:re 0)" "(swap\! re assoc {\:hello 1})" "(swap\! re (->> + 1))" "(swap\! re \#(+ 1))" "(swap\! re \#(+ 1 %))" "(swap\! re \#(assoc \:id 15))" "(swap\! re \#(assoc % \:id 15))" "(swap\! re \#(conj % {\:hello \\"rere\\"}))" "(str-field-to-int \\"11\\")" "(str-field-to-int \:id {\:id \\"23\\"})" "(swap\! re (->> (conj {\:privat \\"bla-bla\\"})))" "(swap\! re (->> \#(conj {\:privat \\"bla-bla\\"} %)))" "(swap\! re (->> (conj {\:privat \\"bla-bla\\"})))" "(conj {\:h 23} @re)" "@re" "(swap\! re (->> @re (conj {\:private \\"bla-bla\\"})))" "@re" "(->> @re\\n  (conj {\:pr \\"bla-bla\\"}))" "@re" "(swap\! re (->> @re\\n            (conj {\:pr \\"bla-bla\\"})))" "@re" "(swap\! re \#(->> % (conj {\:pr \\"bla-bla\\"})))" "@re" "(swap\! re \#(->> % (\#(conj %1 %2) {\:privat \\"bla-bla\\"})))" "@re" "(load-initial-data)" "(swap\! re (fn [x] (->> x (conj {\:privat \\"bla-bla\\"}))))" "(load-initial-data)" "(load-initial-data [])" "(load-initial-data)" "(->> \\r\\n                          (data-table (csv/read-csv (slurp \\"student.csv\\")))\\r\\n                          (map \#(str-field-to-int \:id %))\\r\\n                          (map \#(str-field-to-int \:year %)))" "(load-initial-data)" "(apply load-initial-data)" "(apply load-initial-data [])" "(load-initial-data)" "(load-initial-data [])" "(apply (->> (data-table (csv/read-csv (slurp \\"student_subject.csv\\")))\\r\\n                                  (map \#(str-field-to-int \:subject_id %))\\r\\n                                  (map \#(str-field-to-int \:student_id %)))\\r\\n                                [])" "(apply (->> (data-table (csv/read-csv (slurp \\"student_subject.csv\\")))\\r\\n                                  (map \#(str-field-to-int \:subject_id %))\\r\\n                                  (map \#(str-field-to-int \:student_id %))))" "(load-initial-data [])" "(apply (->> (data-table (csv/read-csv (slurp \\"student_subject.csv\\")))\\r\\n                                  (map \#(str-field-to-int \:subject_id %))\\r\\n                                  (map \#(str-field-to-int \:student_id %))))" "(apply (->> (data-table (csv/read-csv (slurp \\"student_subject.csv\\")))\\r\\n                                  (map \#(str-field-to-int \:subject_id %))\\r\\n                                  (map \#(str-field-to-int \:student_id %)))\\n       [])" "(doall (->> (data-table (csv/read-csv (slurp \\"student_subject.csv\\")))\\r\\n                                  (map \#(str-field-to-int \:subject_id %))\\r\\n                                  (map \#(str-field-to-int \:student_id %))))" "(load-initial-data)" "(doall (->> (data-table (csv/read-csv (slurp \\"student_subject.csv\\")))\\r\\n                                  (map \#(str-field-to-int \:subject_id %))\\r\\n                                  (map \#(str-field-to-int \:student_id %))))" "(swap\! student-subject (doall (->> (data-table (csv/read-csv (slurp \\"student_subject.csv\\")))\\r\\n                                  (map \#(str-field-to-int \:subject_id %))\\r\\n                                  (map \#(str-field-to-int \:student_id %)))))" "(doall (swap\! student-subject (doall (->> (data-table (csv/read-csv (slurp \\"student_subject.csv\\")))\\r\\n                                  (map \#(str-field-to-int \:subject_id %))\\r\\n                                  (map \#(str-field-to-int \:student_id %))))))" "(defn dd (swap\! student-subject (doall (->> (data-table (csv/read-csv (slurp \\"student_subject.csv\\")))\\r\\n                                  (map \#(str-field-to-int \:subject_id %))\\r\\n                                  (map \#(str-field-to-int \:student_id %))))))" "(defn dd (doall (->> (data-table (csv/read-csv (slurp \\"student_subject.csv\\")))\\r\\n                                  (map \#(str-field-to-int \:subject_id %))\\r\\n                                  (map \#(str-field-to-int \:student_id %)))))" "(defn dd (->> (data-table (csv/read-csv (slurp \\"student_subject.csv\\")))\\r\\n                                     (map \#(str-field-to-int \:subject_id %))\\r\\n                                     (map \#(str-field-to-int \:student_id %))))" "(def dd (doall (->> (data-table (csv/read-csv (slurp \\"student_subject.csv\\")))\\r\\n                                     (map \#(str-field-to-int \:subject_id %))\\r\\n                                     (map \#(str-field-to-int \:student_id %)))))" "(def dd (doall (->> (data-table (csv/read-csv (slurp \\"student_subject.csv\\")))\\r\\n                                  (map \#(str-field-to-int \:subject_id %))\\r\\n                                  (map \#(str-field-to-int \:student_id %)))))" "(dd)" "(println dd)" "(swap\! re dd)" "(swap\! re (doall dd))" "(swap\! re (apply dd))" "(swap\! re (apply dd []))" "(class dd)" "(class (apply list (dd)))" "(class (apply list dd))" "(apply list dd)" "(class (apply list dd))" "(swap\! re (apply list dd))" "(swap\! re (fn [] (apply list dd)))" "(swap\! re (fn [x] (apply list dd)))" "@re" "(swap\! re (fn [x] (doall dd)))" "(swap\! re (fn [x] (dd)))" "(swap\! re (fn [x] (do dd)))" "(load-initial-data)" "@student" "@subject" "@student-subject" "(read-string \\"\#(\= (\:id %) 1))\\")" "(def re (read-string \\"\#(\= (\:id %) 1))\\"))" "(re {\:id 12})" "(println re)" "(class re)" "'(\# true)" "'\\"\#(true)\\"" "(symbol \\"\#(true)\\")" "(defn re (symbol \\"\#(true)\\"))" "(filter  (symbol \\"\#(true)\\") [1 2 3 4])" "(filter  (symbol \\"\#(\= 1 %)\\") [1 2 3 4])" "(filter  (symbol \\"\#(false)\\") [1 2 3 4])" "(class  (symbol \\"\#(true)\\"))" "(def re (read-string \\"\#(\= (\:id %) 1))\\"))" "(head re)" "(println re)" "(re 12)" "(first re)" "(vec re)" "(eval re)" "(println re)" "(eval \\"\#(\= (\:id %) 1))\\")" "(read \\"\#(\= (\:id %) 1))\\")" "(eval (read-string \\"\#(\= (\:id %) 1))\\"))" "((eval (read-string \\"\#(\= (\:id %) 1))\\")) {\:id 1})" "((eval (read-string \\"\#(\= (\:id %) 1))\\")) {\:id 2})" "((eval (read-string nil)) {\:id 2})" "(def re (if true 1 0))" "(println re)" "@student" "(swap\! student assoc \:id 12)" "(delete student \:where \#(\= (\:id %) 12))" "@student" "(swap\! student assoc \:id 12)" "@student" "(swap\! student {})" "@student" "(swap\! student assoc \:id 12)" "(delete student)" "@student" "(def dd (1 2 2 3 4))" "(def dd (1 2 3 4))" "(def dd '(1 2 3 4))" "((partial remove (if nil true \#(\= 1 %))) dd)" "@student" "(swap\! student assoc \:id 12)" "@student" "(delete student)" "(read-string \\"\\")" "(eval (read-string nil))" "(swap\! student assoc \:id 12)" "@student" "(delete student)" "@student" "(swap\! student assoc \:id 12)" "(delete student)" "(swap\! student assoc \:id 12)" "(delete student)" "(swap\! student assoc \:id 12)" "(delete student)" "(swap\! student assoc \:id 12)" "(delete student)" "@student" "(swap\! student assoc \:id 12)" "(delete student \:where \#(\= (\:id %) 5))" "(swap\! student assoc \:id 12)" "(delete student \:where \#(\= (\:id %) 5))" "(swap\! student assoc \:id 12)" "(delete student \:where \#(\= (\:id %) 5))" "(str \#(1 + 1))" "(println (str \#(1 + 1)))" "(println (pr-str \#(1 + 1)))" "(swap\! student assoc \:id 12)" "(delete student \:where \#(\= (\:id %) 5))" "(read-string (pr-str \#(1 + 1)))" "(clojure.edn/pr-str \#(1 + 1))" "(eval \#(1 + 1))" "(symbol \#(1 + 1))" "(resolve \#(1 + 1))" "(split \#(1 + 1))" "(swap\! student assoc \:id 12)" "@student" "(delete student)" "@student" "(swap\! student assoc \:id 12)" "(fn [x] {})" "(def re (fn [x] {}))" "(re 5)" "(if-not where\\r\\n                (fn [x] {})\\r\\n                (fn [x] (remove where %)))" "(def re (if-not where\\r\\n                (fn [x] {})\\r\\n                (fn [x] (remove where %))))" "(def re (if-not false\\r\\n                (fn [x] {})\\r\\n                (fn [x] (remove where %))))" "(def re (if-not false\\r\\n                (fn [x] {})\\r\\n                (fn [x] (remove true %))))" "@student" "(swap\! student assoc \:id 12)" "@student" "(delete student \:where \#(\= (\:id %) 1))" "@student" "(swap\! student assoc \:id 12)" "(delete student \:where \#(\= (\:id %) 1))" "(delete student \:where \#(\= (\:id %) 12))" "@student" "(vec ([\:id 12]))" "(delete student)" "@student" "(flatten ([\:id 12]))" "(flatten '([\:id 12]))" "(remove false {\:id 12})" "(remove false ({\:id 12}))" "@student" "(swap\! student assoc {\:id 12})" "(swap\! student (fn [x] (({\:id 2} {\:id 12} {\:id 4} {\:id 1}))))" "(swap\! student fn [x] (({\:id 2} {\:id 12} {\:id 4} {\:id 1})))" "(swap\! student (fn [x] ({\:id 2} {\:id 12} {\:id 4} {\:id 1})))" "(swap\! student (fn [x] (\:id 2)))" "@student" "(swap\! student (fn [x] {\:id 2}))" "(def student (atom ()))" "(swap\! student (fn [x] ({\:id 2} {\:id 12} {\:id 4} {\:id 1})))" "(swap\! student (fn [x] (\:id 2)))" "(swap\! student (fn [x] ((\:id 2))))" "(swap\! student (fn [x] (({\:id 2}))))" "(swap\! student (fn [x] ('({\:id 2}))))" "(swap\! student (fn [x] '({\:id 2})))" "(swap\! student (fn [x] '({\:id 2} {\:id 12} {\:id 4})))" "(delete student \:where \#(\= (\:id %) 1))" "(delete student \:where \#(\= (\:id %) 2))" "(delete student)" "(swap\! student (fn [x] '({\:id 2} {\:id 12} {\:id 4})))" "(delete student)" "(swap\! student (fn [x] '({\:id 2} {\:id 12} {\:id 4})))" "(delete student)" "(swap\! student (fn [x] '({\:id 2} {\:id 12} {\:id 4})))" "(delete student)" "(swap\! student (fn [x] '[{\:id 2} {\:id 12} {\:id 4}]))" "(delete student \:where \#(\= (\:id %) 2))" "(swap\! student (fn [x] '[{\:id 2} {\:id 12} {\:id 4}]))" "(delete student \:where \#(\= (\:id %) 2))" "(- 10 (* 2 3))" "(list \:a \:b \:c)" "(vec '(\:a \:b \:c))" "(vector \:a \:b \:c)" "(\= [(\:a \:b \:c) [\:a \:b \:c] [\:a \:b \:c]] (list \:a \:b \:c) (vec '(\:a \:b \:c)) (vector \:a \:b \:c))" "((list \:a \:b \:c) (vec '(\:a \:b \:c)) (vector \:a \:b \:c))" "(\= [\:a \:b \:c] (list \:a \:b \:c) (vec '(\:a \:b \:c)) (vector \:a \:b \:c))" "((hash-map \:a 10 \:b 20 \:c 30) \:b)" "(conj {\:a 1 \:b 2} [\:a 3])" "((partial + \\"Hello, \\") \\"J\\")" "((partial \\"Hello, \\") \\"J\\")" "(\#(\\"Hello, \\" %) \\"J\\")" "(\#(str \\"Hello, \\" %) \\"J\\")" "((partial str \\"Hello, \\" %) \\"J\\")" "((partial str \\"Hello, \\") \\"J\\")" "(fn [s n]\\r\\n  (if-not (\= n 0)\\r\\n    (recur ((next s) (- n 1)))\\r\\n    (first s)))" "(fn [s n]\\r\\n  (if-not (\= n 0)\\r\\n    (recur [(next s) (- n 1)])\\r\\n    (first s)))" "(fn \\r\\n  ([s] (recur s 0))\\r\\n  ([s c]\\r\\n   (if (next s)\\r\\n       (recur (next s) (inc n))\\r\\n       (n))))" "(fn -count\\r\\n  ([s] (-count s 0))\\r\\n  ([s c]\\r\\n   (if (next s)\\r\\n       (recur (next s) (inc n))\\r\\n       (n))))" "(fn -count\\r\\n  ([s] (-count s 0))\\r\\n  ([s c]\\r\\n   (if (next s)\\r\\n       (recur (next s) (inc c))\\r\\n       (c))))" "(fn -count\\r\\n  ([s] (recur s 0))\\r\\n  ([s c]\\r\\n   (if (next s)\\r\\n       (recur (next s) (inc c))\\r\\n       (c))))" "(-count '(1 2 3))" "(fn -count\\r\\n  ([s] (-count s 0))\\r\\n  ([s c]\\r\\n   (if (next s)\\r\\n       (recur (next s) (inc c))\\r\\n       (c))))" "(-count '(1 2 3))" "(fn ccount\\r\\n  ([s] (ccount s 0))\\r\\n  ([s c]\\r\\n   (if (next s)\\r\\n       (recur (next s) (inc c))\\r\\n       (c))))" "(ccount '(1 2 3))" "(fn ccount\\r\\n  ([s] (ccount s 0))\\r\\n  ([s c]\\r\\n   (if (next s)\\r\\n       (recur (next s) (inc c))\\r\\n       c)))" "(ccount '(1 2 3))" "(fn ccount\\r\\n  ([s c]\\r\\n   (if (next s)\\r\\n       (recur (next s) (inc c))\\r\\n       c)))" "(ccount '(1 2 3) 0)" "(fn ccount\\r\\n  ([s c]\\r\\n   (if (next s)\\r\\n       (ccount (next s) (inc c))\\r\\n       c)))" "(ccount '(1 2 3) 0)" "(fn\\r\\n  ([s c]\\r\\n   (if (next s)\\r\\n       (recur (next s) (inc c))\\r\\n       c)))" "((fn\\r\\n  ([s c]\\r\\n   (if (next s)\\r\\n       (recur (next s) (inc c))\\r\\n       c))) '(1 2 3) 0)" "(fn\\r\\n  ([s] (recur s 0))\\r\\n  ([s c]\\r\\n   (if (next s)\\r\\n       (recur (next s) (inc c))\\r\\n       c)))" "(fn\\r\\n  (nnt [s] (nnt s 0))\\r\\n  (nnt [s c]\\r\\n   (if (next s)\\r\\n       (recur (next s) (inc c))\\r\\n       c)))" "(def nnt\\r\\n  (nnt [s] (nnt s 0))\\r\\n  (nnt [s c]\\r\\n   (if (next s)\\r\\n       (recur (next s) (inc c))\\r\\n       c)))" "(def nnt\\r\\n  ([s] (nnt s 0))\\r\\n  ([s c]\\r\\n   (if (next s)\\r\\n       (recur (next s) (inc c))\\r\\n       c)))" "(defn nnt\\r\\n  ([s] (nnt s 0))\\r\\n  ([s c]\\r\\n   (if (next s)\\r\\n       (recur (next s) (inc c))\\r\\n       c)))" "((defn nnt\\r\\n  ([s] (nnt s 0))\\r\\n  ([s c]\\r\\n   (if (next s)\\r\\n       (recur (next s) (inc c))\\r\\n       c))) '(1 2 3))" "(defn -count\\r\\n  ([s] (if-not s \\r\\n         0 \\r\\n         -count s 1))\\r\\n  ([s c]\\r\\n   (if (next s)\\r\\n       (recur (next s) (inc c))\\r\\n       (c))))" "(defn -count\\r\\n  ([s] (if-not s \\r\\n         0 \\r\\n         (-count s 1)))\\r\\n  ([s c]\\r\\n   (if (next s)\\r\\n       (recur (next s) (inc c))\\r\\n       (c))))" "(-count '(1 2 3))" "(defn -count\\r\\n  ([s] (if-not s \\r\\n         0 \\r\\n         (-count s 1)))\\r\\n  ([s c]\\r\\n   (if (next s)\\r\\n       (recur (next s) (inc c))\\r\\n       c)))" "(-count '(1 2 3))" "(\= ((defn -count\\r\\n  ([s] (if-not s \\r\\n         0 \\r\\n         (-count s 1)))\\r\\n  ([s c]\\r\\n   (if (next s)\\r\\n       (recur (next s) (inc c))\\r\\n       c))) '(1 2 2 3 3 1)) 5)" "(\= ((defn -count\\r\\n  ([s] (if-not s \\r\\n         0 \\r\\n         (-count s 1)))\\r\\n  ([s c]\\r\\n   (if (next s)\\r\\n       (recur (next s) (inc c))\\r\\n       c))) '(1 2 3 3 1)) 5)" "(defn -count\\r\\n  ([s] (if-not s \\r\\n         0 \\r\\n         (-count s 1)))\\r\\n  ([s c]\\r\\n   (if (next s)\\r\\n       (recur (next s) (inc c))\\r\\n       c)))" "(fn [s] \\n  ((fn [s n] (if (next s) (recur (next s) (inc c)) c))\\n  s \\n  1))" "(fn [s] \\n  ((fn [s n] (if (next s) (recur (next s) (inc n)) n))\\n  s \\n  1))" "(conj [[1]] [2])" "(conj [1] [[2]])" "(vec [[1]] [2])" "(vector [[1]] [2])" "(cons [[1]] [2])" "(conj (flatten [[1]]) [2])" "(conj [2] (flatten [[1] [3]]))" "(conj [[1] [2]] [3])" "(fn [s]\\r\\n  (loop [cnt (count s) acc []]\\r\\n    (if (zero? cnt)\\r\\n      acc\\r\\n      (recur (dec cnt) (conj acc (nth (dec cnt) s))))))" "((fn [s]\\r\\n  (loop [cnt (count s) acc []]\\r\\n    (if (zero? cnt)\\r\\n      acc\\r\\n      (recur (dec cnt) (conj acc (nth (dec cnt) s)))))) '[1 2 3 4])" "((fn [s]\\r\\n  (loop [cnt (count s) acc []]\\r\\n    (if (zero? cnt)\\r\\n      acc\\r\\n      (recur (- cnt 1) (conj acc (nth (- cnt 1) s)))))) '[1 2 3 4])" "(count '[1 2 3])" "((fn [s]\\r\\n  (loop [cnt (count s) acc []]\\r\\n    (if (zero? cnt)\\r\\n      acc\\r\\n      (recur (- cnt 1) (conj (nth (- cnt 1) s) acc))))) '[1 2 3 4])" "((fn [s]\\r\\n  (loop [cnt (count s) acc []]\\r\\n    (if (zero? cnt)\\r\\n      acc\\r\\n      (recur (- cnt 1) (conj acc (nth s (- cnt 1))))))) '[1 2 3 4])" "(not nil)" "@student" "(swap\! student (fn [x] '[{\:id 2} {\:id 12} {\:id 4}]))" "(update student {\:id 5})" "(swap\! student (fn [x] '[{\:id 2} {\:id 12} {\:id 4}]))" "(update student {\:id 6} \:where \#(\= (\:id %) 12))" "(update student {\:id 6} \:where \#(\= (\:id %) 1))" "@student" "(swap\! student conj {\:id 10 \:year 2000})" "(as-and-bs \\"aaaaabbbbaaaabb\\")" "(task02.Database. InitDatabase)" "(Integer. MAX_INT)" "(Integer. MAX_VALUE)" "(println (Integer. MAX_VALUE))" "(Integer MAX_VALUE)" "(java.lang.Integer/MAX_VALUE)" "(task02.Database/InitDatabase)" "(java.lang.Math/PI)" "(task02.Database/InitDatabase)" "(compile task02.Database)" "(task02.Database/InitDatabase)" "(task02.Database/Select \\"df\\")" "(task02.Database/Select)" "(task02.Database/Select \\"\\")" "(task02.Database/InitDatabase)" "(task02.Database/Stop)" "(task02.Database/stop)" "(task02.Database/Stop)" "(task02.Database/Select)" "(task02.Database/Select \\"\\")" "(task02.Database/Select [\\"\\"])" "(task02.Database/Select \\"\\")" "(task02.Database/InitDatabase)" "(task02.Database/Select \\"select students\\")" "(try (throw RuntimeException.)\\n  (catch Throwable ignore ))" "(try (throw Exception.)\\n  (catch Throwable ignore ))" "(try (throw (Exception.))\\n  (catch Throwable ignore ))" "(try (throw (Exception.))\\n (catch Throwable ignore (println ignore)))" "(.start (Thread. \#(println \\"hello\\")))" "(.start (Thread. (1 - 2))" "(.start (Thread. (1 - 2)))" "(.start (Thread. \#(1 - 2)))" "(.start (Thread. fn [](1 - 2)))" "(.start (Thread. (fn [](1 - 2))))" "(.start (Thread. \#(- 1 2)))" "(defn ff [x]\\n  ((try\\n    (java.lang.Thread/sleep 2000)\\n    (catch Exception ignore))\\n  x))" "(def f (future (10 ff)))" "f" "(println f)" "@f" "(defn ff [x]\\n  (try\\n   (java.lang.Thread/sleep 2000)\\n   (catch Exception ignore))\\n  x)" "(def f (future (10 ff)))" "@f" "(def f (future (10 ff)))" "@f" "(def f (future (ff 10)))" "@f" "(defn ff [x]\\n  (try\\n   (java.lang.Thread/sleep 10000)\\n   (catch Exception ignore))\\n  x)" "@f" "(def f (future (ff 20)))" "@f" "(defn ff [x]\\n  (try\\n   (java.lang.Thread/sleep 10000)\\n   (catch Exception ignore))\\n  (println \\"hello\\")\\n  x)" "(def f (future (ff 4)))" "@f" "(def f (future (ff 90)))" "(println (- 10 f))" "(def f (future (ff 94)))" "(println (- 10 @f))" "(def f (future (ff 91)))" "(println (- 10 @f))" "(println \\"h\\")" "(as-and-bs \\"aaaaabbbaaaabb\\")" "(def re (insta/parse\\n          \\"sentence \= token (<whitespace> token)" "(def re (insta/parse\\n          \\"sentence \= token (<whitespace> token)*" "(def re (insta/parse\\n          \\"word \= letter+\\"))" "(def as-and-bs\\r\\n  (insta/parser\\r\\n    \\"S \= AB*\\r\\n    AB \= A B\\r\\n    A \= 'a'+\\r\\n    B \= 'b'+\\"))" "(def re (insta/parse\\n          \\"word \= letter+\\"))" "(def as-and-bs\\r\\n  (insta/parser\\r\\n    \\"S \= AB*\\r\\n    AB \= A B\\r\\n    A \= 'a'+\\r\\n    B \= 'b'+\\"))" "(def re (insta/parse\\n          \\"word \= letter+ \\n<letter> \= \#'[a-zA-Z]'\\"))" "(def re (insta/parse\\n          \\"sentence \= word (' ' word)*\\nword \= letter+ \\n<letter> \= \#'[a-zA-Z]'\\"))" "(def words-and-numbers-one-character-at-a-time\\r\\n  (insta/parser\\r\\n    \\"sentence \= token (<whitespace> token)*\\r\\n     <token> \= word | number\\r\\n     whitespace \= \#'\\\\\\\\s+'\\r\\n     word \= letter+\\r\\n     number \= digit+\\r\\n     <letter> \= \#'[a-zA-Z]'\\r\\n     <digit> \= \#'[0-9]'\\"))" "(def re (insta/parse\\n          \\"sentence \= word (<whitespace> token)*\\n<whitespace> \= \#'\\\\\\\\s+'\\n<word> \= letter+ \\n<letter> \= \#'[a-zA-Z]'\\"))" "(def re (insta/parse\\n          \\"sentence \= token (<whitespace> token)*\\n<token> \= word\\n<whitespace> \= \#'\\\\\\\\s+'\\n<word> \= letter+ \\n<letter> \= \#'[a-zA-Z]'\\"))" "(def re (insta/parse\\n          \\"sentence \= token (<whitespace> token)*\\n<token> \= word | number\\n<whitespace> \= \#'\\\\\\\\s+'\\n<word> \= letter+\\nnumber \= digit+ \\n<letter> \= \#'[a-zA-Z]'\\n<digit> \= \#'[0-9]'\\"))" "(def re (insta/parse\\n          \\"sentence \= token (<whitespace> token)*\\n<token> \= word | number\\n<whitespace> \= \#'\\\\\\\\s+'\\nword \= letter+\\nnumber \= digit+ \\n<letter> \= \#'[a-zA-Z]'\\n<digit> \= \#'[0-9]'\\"))" "(def words-and-numbers-one-character-at-a-time\\r\\n  (insta/parser\\r\\n    \\"sentence \= token (<whitespace> token)*\\r\\n     <token> \= word | number\\r\\n     whitespace \= \#'\\\\\\\\s+'\\r\\n     word \= letter+\\r\\n     number \= digit+\\r\\n     <letter> \= \#'[a-zA-Z]'\\r\\n     <digit> \= \#'[0-9]'\\"))" "(def re (insta/parse \\"sentence \= token (<whitespace> token)*\\n<token> \= word | number\\n<whitespace> \= \#'\\\\\\\\s+'\\nword \= letter+\\nnumber \= digit+ \\n<letter> \= \#'[a-zA-Z]'\\n<digit> \= \#'[0-9]'\\"))" "(def dd (insta/parse \\"sentence \= token (<whitespace> token)*\\n<token> \= word | number\\n<whitespace> \= \#'\\\\\\\\s+'\\nword \= letter+\\nnumber \= digit+ \\n<letter> \= \#'[a-zA-Z]'\\n<digit> \= \#'[0-9]'\\"))" "(def words-and-numbers-one-character-at-a-time\\r\\n  (insta/parser\\r\\n    \\"sentence \= token (<whitespace> token)*\\r\\n     <token> \= word | number\\r\\n     whitespace \= \#'\\\\\\\\s+'\\r\\n     word \= letter+\\r\\n     number \= digit+\\r\\n     <letter> \= \#'[a-zA-Z]'\\r\\n     <digit> \= \#'[0-9]'\\"))" "(def dd (insta/parse \\"sentence \= token (<whitespace> token)*\\n<token> \= word | number\\n<whitespace> \= \#'\\\\\\\\s+'\\nword \= letter+\\nnumber \= digit+ \\n<letter> \= \#'[a-zA-Z]'\\n<digit> \= \#'[0-9]'\\"))" "(def dd \\n  (insta/parse \\n    \\"sentence \= token (<whitespace> token)*\\n<token> \= word | number\\n<whitespace> \= \#'\\\\\\\\s+'\\nword \= letter+\\nnumber \= digit+ \\n<letter> \= \#'[a-zA-Z]'\\n<digit> \= \#'[0-9]'\\"))" "(def words-and-numbers-one-character-at-a-time\\r\\n  (insta/parser\\r\\n    \\"sentence \= token (<whitespace> token)*\\r\\n     <token> \= word | number\\r\\n     whitespace \= \#'\\\\\\\\s+'\\r\\n     word \= letter+\\r\\n     number \= digit+\\r\\n     <letter> \= \#'[a-zA-Z]'\\r\\n     <digit> \= \#'[0-9]'\\"))" "(def dd \\n  (insta/parse \\n    \\"sentence \= token (<whitespace> token)*\\n    <token> \= word | number\\n    <whitespace> \= \#'\\\\\\\\s+'\\n    word \= letter+\\n    number \= digit+ \\n    <letter> \= \#'[a-zA-Z]'\\n    <digit> \= \#'[0-9]'\\"))" "(def words-and-numbers-one-character-at-a-time\\r\\n  (insta/parser\\r\\n    \\"sentence \= token (<whitespace> token)*\\r\\n     <token> \= word | number\\r\\n     whitespace \= \#'\\\\\\\\s+'\\r\\n     word \= letter+\\r\\n     number \= digit+\\r\\n     <letter> \= \#'[a-zA-Z]'\\r\\n     <digit> \= \#'[0-9]'\\"))" "(def dd \\n  (insta/parse \\n    \\"sentence \= token (<whitespace> token)*\\n     <token> \= word | number\\n     <whitespace> \= \#'\\\\\\\\s+'\\n     word \= letter+\\n     number \= digit+ \\n     <letter> \= \#'[a-zA-Z]'\\n     <digit> \= \#'[0-9]'\\"))" "(def words-and-numbers-one-character-at-a-time\\r\\n  (insta/parser\\r\\n    \\"sentence \= token (<whitespace> token)*\\r\\n     <token> \= word | number\\r\\n     whitespace \= \#'\\\\\\\\s+'\\r\\n     word \= letter+\\r\\n     number \= digit+\\r\\n     <letter> \= \#'[a-zA-Z]'\\r\\n     <digit> \= \#'[0-9]'\\"))" "(def dd \\n  (insta/parse \\n    \\"sentence \= token (<whitespace> token)*\\n     <token> \= word | number\\n     whitespace \= \#'\\\\\\\\s+'\\n     word \= letter+\\n     number \= digit+ \\n     <letter> \= \#'[a-zA-Z]'\\n     <digit> \= \#'[0-9]'\\"))" "(def words-and-numbers-one-character-at-a-time\\r\\n  (insta/parser\\r\\n    \\"sentence \= token (<whitespace> token)*\\r\\n     <token> \= word | number\\r\\n     whitespace \= \#'\\\\\\\\s+'\\r\\n     word \= letter+\\r\\n     number \= digit+\\r\\n     <letter> \= \#'[a-zA-Z]'\\r\\n     <digit> \= \#'[0-9]'\\"))" "(def dd \\n  (insta/parser\\n    \\"sentence \= token (<whitespace> token)*\\n     <token> \= word | number\\n     whitespace \= \#'\\\\\\\\s+'\\n     word \= letter+\\n     number \= digit+ \\n     <letter> \= \#'[a-zA-Z]'\\n     <digit> \= \#'[0-9]'\\"))" "(dd \\"123 rere dljjf le 32432\\")" "(def dd \\n  (insta/parser\\n    \\"sentence \= token (<whitespace> token)*\\n     <token> \= word | number\\n     <whitespace> \= \#'\\\\\\\\s+'\\n     word \= letter+\\n     number \= digit+ \\n     <letter> \= \#'[a-zA-Z]'\\n     <digit> \= \#'[0-9]'\\"))" "(dd \\"123 rere dljjf le 32432\\")" "(def re (insta/parse\\r\\n          \\"sentence \= token (<whitespace> token)*\\r\\n          <token> \= 'select' <whitespace> tbl-name | \\r\\n                    'where' <whitespace> cond-cl <whitespace> cond <whitespace> cond-val |\\r\\n                    'order by' <whitespace> ordr-cl |\\r\\n                    'limit' <whitespace> lmt-num\\r\\n          tbl-name \= name\\r\\n          cond-cl \= name\\r\\n          cond \= '\=' | '\!\=' | '<' | '>' | '<\=' | '>\='\\r\\n          cond-val \= any\\r\\n          ordr-cl \= name\\r\\n          lmt-num \= num\\r\\n          <name> \= \#'[a-zA-Z][a-z&A-Z&-&_]*'\\r\\n          <num> \= \#'[0-9]+'\\"))" "(def re (insta/parser\\r\\n          \\"sentence \= token (<whitespace> token)*\\r\\n          <token> \= 'select' <whitespace> tbl-name | \\r\\n                    'where' <whitespace> cond-cl <whitespace> cond <whitespace> cond-val |\\r\\n                    'order by' <whitespace> ordr-cl |\\r\\n                    'limit' <whitespace> lmt-num\\r\\n          tbl-name \= name\\r\\n          cond-cl \= name\\r\\n          cond \= '\=' | '\!\=' | '<' | '>' | '<\=' | '>\='\\r\\n          cond-val \= any\\r\\n          ordr-cl \= name\\r\\n          lmt-num \= num\\r\\n          <name> \= \#'[a-zA-Z][a-z&A-Z&-&_]*'\\r\\n          <num> \= \#'[0-9]+'\\"))" "(def dd \\n  (insta/parser\\n    \\"sentence \= token (<whitespace> token)*\\n     <token> \= word | number\\n     <whitespace> \= \#'\\\\\\\\s+'\\n     word \= letter+\\n     number \= digit+ \\n     <letter> \= \#'[a-zA-Z]'\\n     <digit> \= \#'[0-9]'\\"))" "(def re (insta/parser\\r\\n          \\"sentence \= token (<whitespace> token)*\\r\\n          <token> \= 'select' <whitespace> tbl-name\\r\\n          tbl-name \= name\\r\\n          cond-cl \= name\\r\\n          cond \= '\=' | '\!\=' | '<' | '>' | '<\=' | '>\='\\r\\n          cond-val \= any\\r\\n          ordr-cl \= name\\r\\n          lmt-num \= num\\r\\n          <name> \= \#'[a-zA-Z][a-z&A-Z&-&_]*'\\r\\n          <num> \= \#'[0-9]+'\\"))" "(def re (insta/parser\\r\\n          \\"sentence \= token (<whitespace> token)*\\r\\n          <token> \= 'select' (<whitespace> tbl-name)\\r\\n          tbl-name \= name\\r\\n          cond-cl \= name\\r\\n          cond \= '\=' | '\!\=' | '<' | '>' | '<\=' | '>\='\\r\\n          cond-val \= any\\r\\n          ordr-cl \= name\\r\\n          lmt-num \= num\\r\\n          <name> \= \#'[a-zA-Z][a-z&A-Z&-&_]*'\\r\\n          <num> \= \#'[0-9]+'\\"))" "(def re (insta/parser\\r\\n          \\"sentence \= token (<whitespace> token)*\\r\\n          <token> \= select tbl-name\\nselect \= 'select' <whitespace>\\r\\n          tbl-name \= name\\r\\n          cond-cl \= name\\r\\n          cond \= '\=' | '\!\=' | '<' | '>' | '<\=' | '>\='\\r\\n          cond-val \= any\\r\\n          ordr-cl \= name\\r\\n          lmt-num \= num\\r\\n          <name> \= \#'[a-zA-Z][a-z&A-Z&-&_]*'\\r\\n          <num> \= \#'[0-9]+'\\"))" "(def re (insta/parser\\r\\n          \\"sentence \= token (<whitespace> token)*\\r\\n          <token> \= select tbl-name\\nselect \= 'select' <whitespace>\\r\\n          tbl-name \= name\\r\\n          cond-cl \= name\\r\\n          cond \= 'a'\\r\\n          cond-val \= any\\r\\n          ordr-cl \= name\\r\\n          lmt-num \= num\\r\\n          <name> \= \#'[a-zA-Z][a-z&A-Z&-&_]*'\\r\\n          <num> \= \#'[0-9]+'\\"))" "(def re (insta/parser\\r\\n          \\"sentence \= token (<whitespace> token)*\\r\\n          <token> \= select tbl-name\\nselect \= 'select'\\r\\n          tbl-name \= name\\r\\n          cond-cl \= name\\r\\n          cond \= 'a'\\r\\n          cond-val \= any\\r\\n          ordr-cl \= name\\r\\n          lmt-num \= num\\r\\n          <name> \= \#'[a-zA-Z][a-z&A-Z&-&_]*'\\r\\n          <num> \= \#'[0-9]+'\\"))" "(def re (insta/parser\\r\\n          \\"sentence \= token (<whitespace> token)*\\r\\n          <token> \= select\\nselect \= 'select'\\r\\n          tbl-name \= name\\r\\n          cond-cl \= name\\r\\n          cond \= 'a'\\r\\n          cond-val \= any\\r\\n          ordr-cl \= name\\r\\n          lmt-num \= num\\r\\n          <name> \= \#'[a-zA-Z][a-z&A-Z&-&_]*'\\r\\n          <num> \= \#'[0-9]+'\\"))" "(def re (insta/parser\\r\\n          \\"sentence \= token (<whitespace> token)*\\r\\n          <token> \= select\\nselect \= 'select'\\r\\n          tbl-name \= name\\r\\n          cond-cl \= name\\r\\n          cond \= 'a'\\r\\n          cond-val \= num\\r\\n          ordr-cl \= name\\r\\n          lmt-num \= num\\r\\n          <name> \= \#'[a-zA-Z][a-z&A-Z&-&_]*'\\r\\n          <num> \= \#'[0-9]+'\\"))" "(def re (insta/parser\\r\\n          \\"sentence \= token (<whitespace> token)*\\r\\n          <token> \= select | 'rr'\\nselect \= 'select'\\r\\n          tbl-name \= name\\r\\n          cond-cl \= name\\r\\n          cond \= 'a'\\r\\n          cond-val \= num\\r\\n          ordr-cl \= name\\r\\n          lmt-num \= num\\r\\n          <name> \= \#'[a-zA-Z][a-z&A-Z&-&_]*'\\r\\n          <num> \= \#'[0-9]+'\\"))" "(def re (insta/parse\\r\\n          \\"sentence \= token (<whitespace> token)*\\r\\n          <token> \= 'select' <whitespace> tbl-name | \\r\\n                    'where' <whitespace> cond-cl <whitespace> cond <whitespace> cond-val |\\r\\n                    'order by' <whitespace> ordr-cl |\\r\\n                    'limit' <whitespace> lmt-num\\r\\n          tbl-name \= name\\r\\n          cond-cl \= name\\r\\n          cond \= '\=' | '\!\=' | '<' | '>' | '<\=' | '>\='\\r\\n          cond-val \= any\\r\\n          ordr-cl \= name\\r\\n          lmt-num \= num\\r\\n          <whitespace> \= \#'\\\\\\\\s+'\\r\\n          <any> \= \#'[0-9a-zA-Z]+'\\r\\n          <name> \= \#'[a-zA-Z][a-z&A-Z&-&_]*'\\r\\n          <num> \= \#'[0-9]+'\\"))" "(def re (insta/parser\\r\\n          \\"sentence \= token (<whitespace> token)*\\r\\n          <token> \= 'select' <whitespace> tbl-name | \\r\\n                    'where' <whitespace> cond-cl <whitespace> cond <whitespace> cond-val |\\r\\n                    'order by' <whitespace> ordr-cl |\\r\\n                    'limit' <whitespace> lmt-num\\r\\n          tbl-name \= name\\r\\n          cond-cl \= name\\r\\n          cond \= '\=' | '\!\=' | '<' | '>' | '<\=' | '>\='\\r\\n          cond-val \= any\\r\\n          ordr-cl \= name\\r\\n          lmt-num \= num\\r\\n          <whitespace> \= \#'\\\\\\\\s+'\\r\\n          <any> \= \#'[0-9a-zA-Z]+'\\r\\n          <name> \= \#'[a-zA-Z][a-z&A-Z&-&_]*'\\r\\n          <num> \= \#'[0-9]+'\\"))" "(re \\"123 rere dljjf le 32432\\")" "(re \\"select students\\")" "(re \\"select students where id \= 10\\")" "(re \\"select students where id \= 10 order by id\\")" "(re \\"select students where id \= 10 order by id limit 2\\")" "(re \\"select students where id \= 10 order by id order by id limit 2\\")" "(def dd (re \\"select students where id \= 10 order by id order by id limit 2\\"))" "(println dd)" "(\:sentence dd)" "(dd \:sentence)" "(dd 0)" "(dd 1)" "(dd 2)" "(insta/visualize (re \\"select students where id \= 10\\"))" "(def re (insta/parser\\r\\n          \\"sentence \= token (<whitespace> token)*\\r\\n          <token> \=  select | where | order-by | limit\\r\\n          select \= 'select' <whitespace> tbl-name\\r\\n          where \= 'where' <whitespace> cond-cl <whitespace> cond <whitespace> cond-val\\r\\n          order-by \= 'order by' <whitespace> ordr-cl\\r\\n          limit \= 'limit' <whitespace> lmt-num\\r\\n          tbl-name \= name\\r\\n          cond-cl \= name\\r\\n          cond \= '\=' | '\!\=' | '<' | '>' | '<\=' | '>\='\\r\\n          cond-val \= any\\r\\n          ordr-cl \= name\\r\\n          lmt-num \= num\\r\\n          <whitespace> \= \#'\\\\\\\\s+'\\r\\n          <any> \= \#'[0-9a-zA-Z]+'\\r\\n          <name> \= \#'[a-zA-Z][a-z&A-Z&-&_]*'\\r\\n          <num> \= \#'[0-9]+'\\"))" "(re \\"select students where id \= 10 order by id order by id limit 2\\")" "(def re (insta/parser\\r\\n          \\"sentence \= token (<whitespace> token)*\\r\\n          <token> \=  select | where | order-by | limit\\r\\n          select \= 'select' <whitespace> tbl-name\\r\\n          where \= 'where' <whitespace> cond-cl <whitespace> cond <whitespace> cond-val\\r\\n          order-by \= 'order by' <whitespace> ordr-cl\\r\\n          limit \= 'limit' <whitespace> lmt-num\\r\\n          tbl-name \= name\\r\\n          cond-cl \= name\\r\\n          cond \= '\=' | '\!\=' | '<' | '>' | '<\=' | '>\='\\r\\n          cond-val \= any\\r\\n          ordr-cl \= name\\r\\n          lmt-num \= num\\r\\n          <whitespace> \= \#'\\\\\\\\s+'\\r\\n          <any> \= \#'\\\\\\\\'?[0-9a-zA-Z]+\\\\\\\\'?'\\r\\n          <name> \= \#'[a-zA-Z][a-z&A-Z&-&_]*'\\r\\n          <num> \= \#'[0-9]+'\\"))" "(re \\"select students where id \= 10 order by id order by id limit 2\\")" "(re \\"select students where id \= 'la'\\n order by id order by id limit 2\\")" "(def re (insta/parser\\r\\n          \\"sentence \= token (<whitespace> token)*\\r\\n          <token> \=  select-token | where-token | order-by-token | limit-token\\r\\n          select-token \= <select> table_name\\r\\n          select \= 'select' <whitespace>\\r\\n          where-token \= <where> column <whitespace> cond <whitespace> cond-val\\r\\n          where \= 'where' <whitespace>   \\r\\n          order-by-token \= <order-by> column\\r\\n          order-by \= 'order by' <whitespace>\\r\\n          limit-token \= <limit> N\\r\\n          limit \= 'limit' <whitespace>\\r\\n          join-token \= <join> other_table <on> left_column <eq> right_column\\r\\n          join \= 'join' <whitespace>\\r\\n          on \= <whitespace> 'on' <whitespace>\\r\\n          eq \= <whitespace> '\=' <whitespace>\\r\\n          table_name \= name\\r\\n          other_table \= name\\r\\n          left_column \= name\\r\\n          right_column \= name\\r\\n          column \= name\\r\\n          cond \= '\=' | '\!\=' | '<' | '>' | '<\=' | '>\='\\r\\n          cond-val \= any\\r\\n          N \= num\\r\\n          <whitespace> \= \#'\\\\\\\\s+'\\r\\n          <any> \= \#'\\\\\\\\'?[0-9a-zA-Z]+\\\\\\\\'?'\\r\\n          <name> \= \#'[a-zA-Z][a-z&A-Z&-&_]*'\\r\\n          <num> \= \#'[0-9]+'\\"))" "(re \\"select students where id \= 'la'\\n order by id order by id limit 2\\")" "(def re (insta/parser\\r\\n          \\"sentence \= token (<whitespace> token)*\\r\\n          <token> \=  select-token | where-token | order-by-token | limit-token\\r\\n          select-token \= <select> table_name\\r\\n          select \= 'select' <whitespace>\\r\\n          where-token \= <'where' <whitespace>> column <whitespace> cond <whitespace> cond-val   \\r\\n          order-by-token \= <order-by> column\\r\\n          order-by \= 'order by' <whitespace>\\r\\n          limit-token \= <limit> N\\r\\n          limit \= 'limit' <whitespace>\\r\\n          join-token \= <join> other_table <on> left_column <eq> right_column\\r\\n          join \= 'join' <whitespace>\\r\\n          on \= <whitespace> 'on' <whitespace>\\r\\n          eq \= <whitespace> '\=' <whitespace>\\r\\n          table_name \= name\\r\\n          other_table \= name\\r\\n          left_column \= name\\r\\n          right_column \= name\\r\\n          column \= name\\r\\n          cond \= '\=' | '\!\=' | '<' | '>' | '<\=' | '>\='\\r\\n          cond-val \= any\\r\\n          N \= num\\r\\n          <whitespace> \= \#'\\\\\\\\s+'\\r\\n          <any> \= \#'\\\\\\\\'?[0-9a-zA-Z]+\\\\\\\\'?'\\r\\n          <name> \= \#'[a-zA-Z][a-z&A-Z&-&_]*'\\r\\n          <num> \= \#'[0-9]+'\\"))" "(re \\"select students where id \= 'la'\\n order by id order by id limit 2\\")" "(def re (insta/parser\\r\\n          \\"sentence \= token (<whitespace> token)*\\r\\n          <token> \=  select-token | where-token | order-by-token | limit-token\\r\\n          select-token \= <select> table_name\\r\\n          select \= 'select' <whitespace>\\r\\n          where-token \= <'where' <whitespace>> column <whitespace> cond <whitespace> cond-val\\r\\n          order-by-token \= <'order by' <whitespace>> column\\r\\n          limit-token \= <'limit' <whitespace>> N\\r\\n          join-token \= <'join' <whitespace>> other_table <<whitespace> 'on' <whitespace>> \\r\\n                      left_column <<whitespace> '\=' <whitespace>> right_column\\r\\n          table_name \= name\\r\\n          other_table \= name\\r\\n          left_column \= name\\r\\n          right_column \= name\\r\\n          column \= name\\r\\n          cond \= '\=' | '\!\=' | '<' | '>' | '<\=' | '>\='\\r\\n          cond-val \= any\\r\\n          N \= num\\r\\n          <whitespace> \= \#'\\\\\\\\s+'\\r\\n          <any> \= \#'\\\\\\\\'?[0-9a-zA-Z]+\\\\\\\\'?'\\r\\n          <name> \= \#'[a-zA-Z][a-z&A-Z&-&_]*'\\r\\n          <num> \= \#'[0-9]+'\\"))" "(re \\"select students where id \= 'la'\\n order by id order by id limit 2\\")" "(def m (re \\"select students where id \= 'la'\\n order by id order by id limit 2\\"))" "(println m)" "(flatten m)" "(\:sentence (flatten m))" "(flatten (m 1))" "(m 1)" "(m 0)" "(tail m)" "(first m)" "(next m)" "(flatten (next m))" "(def re (insta/span\\r\\n          \\"sentence \= token (<whitespace> token)*\\r\\n          <token> \=  select-token | where-token | order-by-token | limit-token\\r\\n          select-token \= <select> table_name\\r\\n          select \= 'select' <whitespace>\\r\\n          where-token \= <'where' <whitespace>> column <whitespace> cond <whitespace> cond-val\\r\\n          order-by-token \= <'order by' <whitespace>> column\\r\\n          limit-token \= <'limit' <whitespace>> N\\r\\n          join-token \= <'join' <whitespace>> other_table <<whitespace> 'on' <whitespace>> \\r\\n                      left_column <<whitespace> '\=' <whitespace>> right_column\\r\\n          table_name \= name\\r\\n          other_table \= name\\r\\n          left_column \= name\\r\\n          right_column \= name\\r\\n          column \= name\\r\\n          cond \= '\=' | '\!\=' | '<' | '>' | '<\=' | '>\='\\r\\n          cond-val \= any\\r\\n          N \= num\\r\\n          <whitespace> \= \#'\\\\\\\\s+'\\r\\n          <any> \= \#'\\\\\\\\'?[0-9a-zA-Z]+\\\\\\\\'?'\\r\\n          <name> \= \#'[a-zA-Z][a-z&A-Z&-&_]*'\\r\\n          <num> \= \#'[0-9]+'\\"))" "(re \\"select students where id \= 'la'\\n order by id order by id limit 2\\")" "(doc insta/span)" "(def re (insta/parser\\r\\n          \\"sentence \= token (<whitespace> token)*\\r\\n          <token> \=  select-token | where-token | order-by-token | limit-token\\r\\n          select-token \= <select> table_name\\r\\n          select \= 'select' <whitespace>\\r\\n          where-token \= <'where' <whitespace>> column <whitespace> cond <whitespace> cond-val\\r\\n          order-by-token \= <'order by' <whitespace>> column\\r\\n          limit-token \= <'limit' <whitespace>> N\\r\\n          join-token \= <'join' <whitespace>> other_table <<whitespace> 'on' <whitespace>> \\r\\n                      left_column <<whitespace> '\=' <whitespace>> right_column\\r\\n          table_name \= name\\r\\n          other_table \= name\\r\\n          left_column \= name\\r\\n          right_column \= name\\r\\n          column \= name\\r\\n          cond \= '\=' | '\!\=' | '<' | '>' | '<\=' | '>\='\\r\\n          cond-val \= any\\r\\n          N \= num\\r\\n          <whitespace> \= \#'\\\\\\\\s+'\\r\\n          <any> \= \#'\\\\\\\\'?[0-9a-zA-Z]+\\\\\\\\'?'\\r\\n          <name> \= \#'[a-zA-Z][a-z&A-Z&-&_]*'\\r\\n          <num> \= \#'[0-9]+'\\"))" "(insta/span (re \\"select students where id \= 'la'\\n order by id order by id limit 2\\"))" "(insta/span (re \\"select students\\"))" "(insta/transform (re \\"select students\\"))" "(insta/transform [\:select] (re \\"select students\\"))" "(insta/transform [\:select 1] (re \\"select students\\"))" "(insta/transform {\:select 1} (re \\"select students\\"))" "(insta/transform {\:select 2} (re \\"select students\\"))" "(insta/transform {\:select 2} \\n                 (next (re \\"select students\\")))" "(insta/transform {\:table_name 2} \\n                 (next (re \\"select students\\")))" "(insta/transform {\:table_name 0} \\n                 (next (re \\"select students\\")))" "(insta/transform {\:table 0} \\n                 (next (re \\"select students\\")))" "(def re (insta/parser\\r\\n          \\"sentence \= token (<whitespace> token)*\\r\\n          <token> \=  select-token | where-token | order-by-token | limit-token\\r\\n          select-token \= <select> table-name\\r\\n          select \= 'select' <whitespace>\\r\\n          where-token \= <'where' <whitespace>> column <whitespace> cond <whitespace> cond-val\\r\\n          order-by-token \= <'order by' <whitespace>> column\\r\\n          limit-token \= <'limit' <whitespace>> N\\r\\n          join-token \= <'join' <whitespace>> other-table <<whitespace> 'on' <whitespace>> \\r\\n                      left_column <<whitespace> '\=' <whitespace>> right-column\\r\\n          table-name \= name\\r\\n          other-table \= name\\r\\n          left-column \= name\\r\\n          right-column \= name\\r\\n          column \= name\\r\\n          cond \= '\=' | '\!\=' | '<' | '>' | '<\=' | '>\='\\r\\n          cond-val \= any\\r\\n          N \= num\\r\\n          <whitespace> \= \#'\\\\\\\\s+'\\r\\n          <any> \= \#'\\\\\\\\'?[0-9a-zA-Z]+\\\\\\\\'?'\\r\\n          <name> \= \#'[a-zA-Z][a-z&A-Z&-&_]*'\\r\\n          <num> \= \#'[0-9]+'\\"))" "(def re (insta/parser\\r\\n          \\"sentence \= token (<whitespace> token)*\\r\\n          <token> \=  select-token | where-token | order-by-token | limit-token\\r\\n          select-token \= <select> table-name\\r\\n          select \= 'select' <whitespace>\\r\\n          where-token \= <'where' <whitespace>> column <whitespace> cond <whitespace> cond-val\\r\\n          order-by-token \= <'order by' <whitespace>> column\\r\\n          limit-token \= <'limit' <whitespace>> N\\r\\n          join-token \= <'join' <whitespace>> other-table <<whitespace> 'on' <whitespace>> \\r\\n                      left-column <<whitespace> '\=' <whitespace>> right-column\\r\\n          table-name \= name\\r\\n          other-table \= name\\r\\n          left-column \= name\\r\\n          right-column \= name\\r\\n          column \= name\\r\\n          cond \= '\=' | '\!\=' | '<' | '>' | '<\=' | '>\='\\r\\n          cond-val \= any\\r\\n          N \= num\\r\\n          <whitespace> \= \#'\\\\\\\\s+'\\r\\n          <any> \= \#'\\\\\\\\'?[0-9a-zA-Z]+\\\\\\\\'?'\\r\\n          <name> \= \#'[a-zA-Z][a-z&A-Z&-&_]*'\\r\\n          <num> \= \#'[0-9]+'\\"))" "(insta/transform {\:left-column} \\n                 (next (re \\"select students\\")))" "(insta/transform {\:select 2} \\n                 (next (re \\"select students\\")))" "(insta/transform {\:left} \\n                 (next (re \\"select students\\")))" "(insta/transform {\:left 0} \\n                 (next (re \\"select students\\")))" "(insta/transform {\:table-name 0} \\n                 (next (re \\"select students\\")))" "(insta/transform {\:table-name 0} \\n                 (next (re \\"select students where id \= 2 limit 2\\")))" "(insta/transform {\:select 0} \\n                 (next (re \\"select students where id \= 2 limit 2\\")))" "(insta/transform {\:select 1} \\n                 (re \\"select students where id \= 2 limit 2\\"))" "(insta/transform {\:select-token 1} \\n                 (re \\"select students where id \= 2 limit 2\\"))" "(insta/transform {\:select-} \\n     (defn- select-pattern \\r\\n  \\"sentence \= token (<whitespace> token)*\\r\\n   <token> \=  select | where | order-by | limit\\r\\n   select \= <'select' <whitespace>> table-name\\r\\n   where \= <'where' <whitespace>> column <whitespace> cond <whitespace> cond-val\\r\\n   order-by \= <'order by' <whitespace>> column\\r\\n   limit \= <'limit' <whitespace>> N\\r\\n   join \= <'join' <whitespace>> other-table <<whitespace> 'on' <whitespace>> \\r\\n              left_column <<whitespace> '\=' <whitespace>> right-column\\r\\n   table-name \= name\\r\\n   other-table \= name\\r\\n   left-column \= name\\r\\n   right-column \= name\\r\\n   column \= name\\r\\n   cond-val \= any\\r\\n   N \= num\\r\\n   cond \= '\=' | '\!\=' | '<' | '>' | '<\=' | '>\='\\r\\n   <whitespace> \= \#'\\\\\\\\s+'\\r\\n   <any> \= \#'\\\\\\\\'?[0-9a-zA-Z]+\\\\\\\\'?'\\r\\n   <name> \= \#'[a-zA-Z][a-z&A-Z&-&_]*'\\r\\n   <num> \= \#'[0-9]+'\\")\\n     \\n     )" "(defn- select-pattern \\r\\n  \\"sentence \= token (<whitespace> token)*\\r\\n   <token> \=  select | where | order-by | limit\\r\\n   select \= <'select' <whitespace>> table-name\\r\\n   where \= <'where' <whitespace>> column <whitespace> cond <whitespace> cond-val\\r\\n   order-by \= <'order by' <whitespace>> column\\r\\n   limit \= <'limit' <whitespace>> N\\r\\n   join \= <'join' <whitespace>> other-table <<whitespace> 'on' <whitespace>> \\r\\n              left_column <<whitespace> '\=' <whitespace>> right-column\\r\\n   table-name \= name\\r\\n   other-table \= name\\r\\n   left-column \= name\\r\\n   right-column \= name\\r\\n   column \= name\\r\\n   cond-val \= any\\r\\n   N \= num\\r\\n   cond \= '\=' | '\!\=' | '<' | '>' | '<\=' | '>\='\\r\\n   <whitespace> \= \#'\\\\\\\\s+'\\r\\n   <any> \= \#'\\\\\\\\'?[0-9a-zA-Z]+\\\\\\\\'?'\\r\\n   <name> \= \#'[a-zA-Z][a-z&A-Z&-&_]*'\\r\\n   <num> \= \#'[0-9]+'\\")" "(def- select-pattern \\r\\n  \\"sentence \= token (<whitespace> token)*\\r\\n   <token> \=  select | where | order-by | limit\\r\\n   select \= <'select' <whitespace>> table-name\\r\\n   where \= <'where' <whitespace>> column <whitespace> cond <whitespace> cond-val\\r\\n   order-by \= <'order by' <whitespace>> column\\r\\n   limit \= <'limit' <whitespace>> N\\r\\n   join \= <'join' <whitespace>> other-table <<whitespace> 'on' <whitespace>> \\r\\n              left_column <<whitespace> '\=' <whitespace>> right-column\\r\\n   table-name \= name\\r\\n   other-table \= name\\r\\n   left-column \= name\\r\\n   right-column \= name\\r\\n   column \= name\\r\\n   cond-val \= any\\r\\n   N \= num\\r\\n   cond \= '\=' | '\!\=' | '<' | '>' | '<\=' | '>\='\\r\\n   <whitespace> \= \#'\\\\\\\\s+'\\r\\n   <any> \= \#'\\\\\\\\'?[0-9a-zA-Z]+\\\\\\\\'?'\\r\\n   <name> \= \#'[a-zA-Z][a-z&A-Z&-&_]*'\\r\\n   <num> \= \#'[0-9]+'\\")" "(def select-pattern \\r\\n  \\"sentence \= token (<whitespace> token)*\\r\\n   <token> \=  select | where | order-by | limit\\r\\n   select \= <'select' <whitespace>> table-name\\r\\n   where \= <'where' <whitespace>> column <whitespace> cond <whitespace> cond-val\\r\\n   order-by \= <'order by' <whitespace>> column\\r\\n   limit \= <'limit' <whitespace>> N\\r\\n   join \= <'join' <whitespace>> other-table <<whitespace> 'on' <whitespace>> \\r\\n              left_column <<whitespace> '\=' <whitespace>> right-column\\r\\n   table-name \= name\\r\\n   other-table \= name\\r\\n   left-column \= name\\r\\n   right-column \= name\\r\\n   column \= name\\r\\n   cond-val \= any\\r\\n   N \= num\\r\\n   cond \= '\=' | '\!\=' | '<' | '>' | '<\=' | '>\='\\r\\n   <whitespace> \= \#'\\\\\\\\s+'\\r\\n   <any> \= \#'\\\\\\\\'?[0-9a-zA-Z]+\\\\\\\\'?'\\r\\n   <name> \= \#'[a-zA-Z][a-z&A-Z&-&_]*'\\r\\n   <num> \= \#'[0-9]+'\\")" "(def re (insta/parser select-pattern))" "(def select-pattern \\r\\n  \\"sentence \= token (<whitespace> token)*\\r\\n   <token> \=  select | where | order-by | limit\\r\\n   select \= <'select' <whitespace>> table-name\\r\\n   where \= <'where' <whitespace>> column <whitespace> cond <whitespace> cond-val\\r\\n   order-by \= <'order by' <whitespace>> column\\r\\n   limit \= <'limit' <whitespace>> N\\r\\n   join \= <'join' <whitespace>> other-table <<whitespace> 'on' <whitespace>> \\r\\n              left-column <<whitespace> '\=' <whitespace>> right-column\\r\\n   table-name \= name\\r\\n   other-table \= name\\r\\n   left-column \= name\\r\\n   right-column \= name\\r\\n   column \= name\\r\\n   cond-val \= any\\r\\n   N \= num\\r\\n   cond \= '\=' | '\!\=' | '<' | '>' | '<\=' | '>\='\\r\\n   <whitespace> \= \#'\\\\\\\\s+'\\r\\n   <any> \= \#'\\\\\\\\'?[0-9a-zA-Z]+\\\\\\\\'?'\\r\\n   <name> \= \#'[a-zA-Z][a-z&A-Z&-&_]*'\\r\\n   <num> \= \#'[0-9]+'\\")" "(def re (insta/parser select-pattern))" "(insta/parse re \\"select student\\")" "(insta/parse re \\"select student sdfsdf\\")" "(try (insta/parse re \\"select student sdfsdf\\") (catch Exception e))" "(def tmp (insta/parse re \\"select student sdfsdf\\"))" "(println tmp)" "(def re (insta/parse re \\n             \\"select student where id \= 2 limit 10\\"))" "(def re (insta/parser select-pattern))" "(def de (insta/parse re \\n             \\"select student where id \= 2 limit 10\\"))" "(insta/transform {\:select \\r\\n                  (fn [tbl-nm] tbl-nm)} de)" "(insta/transform {\:select \\r\\n                  (fn [tbl-nm] \\"hello\\")} de)" "(insta/transform {\:sele \\r\\n                  (fn [tbl-nm] \\"hello\\")} de)" "(insta/transform {\:sele \\r\\n                  (fn [tbl-nm] {\:select-tbl (\:select tbl-nm)})} de)" "(insta/transform {\:select \\r\\n                  (fn [tbl-nm] {\:select-tbl (\:select tbl-nm)})} de)" "(\:r {\:r 10})" "(vector [\:r 10])" "(hash-map [\:r 10])" "(hash [\:r 10])" "(hash-map \:r 10)" "(insta/transform {\:select \\r\\n                  (fn [tbl-nm] {\:select-tbl (tbl-nm 0)})} de)" "(insta/transform {\:select \\r\\n                  (fn [tbl-nm] {\:table-name (tbl-nm 1)})} de)" "(insta/transform {\:select \\r\\n                  (fn [tbl-nm] (tbl-nm 0))} de)" "(insta/transform {\:select \\r\\n                  (fn [tbl-nm] {{tbl-nm 0} {tbl-nm 1}} de)" "(insta/transform {\:select \\r\\n                  (fn [tbl-nm] {tbl-nm 0} de)" "(insta/transform {\:select \\r\\n                  (fn [tbl-nm] {{tbl-nm 0} {tbl-nm 1}})} de)" "(insta/transform {\:select \\r\\n                  (fn [tbl-nm] {tbl-nm 0} )} de)" "(insta/transform {\:select \\r\\n                  (fn [tbl-nm] (hash-map (tbl-nm 1) (tbl-nm 0)))} de)" "(insta/transform {\:select \\r\\n                  (fn [tbl-nm] (hash-map (tbl-nm 0) (tbl-nm 1)))} de)" "(insta/transform {\:select \\r\\n                  (fn [tbl-nm] (hash-map (tbl-nm 0) (tbl-nm 1)))\\n                  \:where\\n                  (fn [column cond cond-val] \\n                    (hash-map \:where \#()))} de)" "(def de (insta/parse re \\n             \\"select student where id \= 2 limit 10\\"))" "(def re (insta/parser select-pattern))" "(def de (insta/parse re \\n             \\"select student where id \= 2 limit 10\\"))" "(insta/transform {\:select \\r\\n                  (fn [tbl-nm] (hash-map (tbl-nm 0) (tbl-nm 1)))\\n                  \:where\\n                  (fn [column cond cond-val] \\n                    (hash-map \:where ))} de)" "(def de (insta/parse re \\n             \\"select student where id \= 2 limit 10\\"))" "(def re (insta/parser select-pattern))" "(def de (insta/parse re \\n             \\"select student where id \= 2 limit 10\\"))" "(insta/transform {\:select \\r\\n                  (fn [tbl-nm] (hash-map (tbl-nm 0) (tbl-nm 1)))\\n                  \:where\\n                  (fn [column cond cond-val] \\n                    (hash-map \:where ))} de)" "(insta/transform {\:select \\r\\n                  (fn [tbl-nm] (hash-map (tbl-nm 0) (tbl-nm 1)))\\n                  } de)" "(insta/transform {\:select \\r\\n                  (fn [tbl-nm] (hash-map (tbl-nm 0) (tbl-nm 1)))\\n                  \:where\\n                  (fn [column comp-op value] \\n                    (hash-map \:where \\n                              (create-cond \\n                                (column 1) \\n                                (comp-op 1) \\n                                (value 1))))} de)" "(insta/transform {\:select \\r\\n                  (fn [tbl-nm] (hash-map \\n                                 (tbl-nm 0) \\n                                 (tbl-nm 1)))\\n                  \:where\\n                  (fn [column comp-op value] \\n                    (hash-map \:where \\n                              (create-cond \\n                                (column 1) \\n                                (comp-op 1) \\n                                (value 1))))\\n                  \:limit\\n                  (fn [n]\\n                    (hash-map \:limit\\n                              (n 1)))} de)" "(insta/transform {\:select \\r\\n                  (fn [tbl-nm] (hash-map \\n                                 (tbl-nm 0) \\n                                 (tbl-nm 1)))\\n                  \:where\\n                  (fn [column comp-op value] \\n                    (hash-map \:where \\n                              (create-cond \\n                                (column 1) \\n                                (comp-op 1) \\n                                (value 1))))\\n                  \:limit\\n                  (fn [n]\\n                    (hash-map \:limit\\n                              (parse-int (n 1))))} de)" "(def re (insta/parser select-pattern))" "(def de (insta/parse re \\n             \\"select student where id \= 2 limit 10 order by id join subject on id \= sid\\"))" "(insta/transform {\:select \\r\\n                  (fn [tbl-nm] (hash-map \\n                                 (tbl-nm 0) \\n                                 (tbl-nm 1)))\\n                  \:where\\n                  (fn [column comp-op value] \\n                    (hash-map \:where \\n                              (create-cond \\n                                (column 1) \\n                                (comp-op 1) \\n                                (value 1))))\\n                  \:limit\\n                  (fn [n]\\n                    (hash-map \:limit\\n                              (n 1)))} de)" "(insta/transform {\:select \\r\\n                  (fn [tbl-nm] (hash-map \\n                                 (tbl-nm 0) \\n                                 (tbl-nm 1)))\\n                  \:where\\n                  (fn [column comp-op value] \\n                    (hash-map \:where \\n                              (create-cond \\n                                (column 1) \\n                                (comp-op 1) \\n                                (value 1))))\\n                  \:limit\\n                  (fn [n]\\n                    (hash-map \:limit\\n                              (n 1)))\\n                  \:order-by\\n                  (fn [column]\\n                    (hash-map \:order-by\\n                              (column 1)))} de)" "(def de (insta/parse re \\n             \\"select student where id \= 2 limit 10 order by id join subject on id \= sid join super-student on id \= ssid\\"))" "(insta/transform {\:select \\r\\n                  (fn [tbl-nm] (hash-map \\n                                 (tbl-nm 0) \\n                                 (tbl-nm 1)))\\n                  \:where\\n                  (fn [column comp-op value] \\n                    (hash-map \:where \\n                              (create-cond \\n                                (column 1) \\n                                (comp-op 1) \\n                                (value 1))))\\n                  \:limit\\n                  (fn [n]\\n                    (hash-map \:limit\\n                              (parse-int (n 1))))} de)" "(def de (insta/parse re \\n             \\"select student where id \= 2 limit 10 order by id join subject on id \= sid join sstudent on id \= ssid\\"))" "(insta/transform {\:select \\r\\n                  (fn [tbl-nm] (hash-map \\n                                 (tbl-nm 0) \\n                                 (tbl-nm 1)))\\n                  \:where\\n                  (fn [column comp-op value] \\n                    (hash-map \:where \\n                              (create-cond \\n                                (column 1) \\n                                (comp-op 1) \\n                                (value 1))))\\n                  \:limit\\n                  (fn [n]\\n                    (hash-map \:limit\\n                              (parse-int (n 1))))} de)" "(insta/transform {\:select \\r\\n                  (fn [tbl-nm] (hash-map \\r\\n                                 (tbl-nm 0) \\r\\n                                 (tbl-nm 1)))\\r\\n                  \:where\\r\\n                  (fn [column comp-op value] \\r\\n                    (hash-map \:where \\r\\n                              (create-cond \\r\\n                                (column 1) \\r\\n                                (comp-op 1) \\r\\n                                (value 1))))\\r\\n                  \:limit\\r\\n                  (fn [n]\\r\\n                    (hash-map \:limit\\r\\n                              (n 1)))\\r\\n                  \:order-by\\r\\n                  (fn [column]\\r\\n                    (hash-map \:order-by\\r\\n                              (column 1)))\\r\\n                  \:join\\r\\n                  (fn [other-table left-column right-column]\\r\\n                    (hash-map \:join\\n                              [(other-table 1)\\n                               (left-column 1)\\n                               (right-column 1)]))} de)" "(def re (insta/parser select-pattern))" "(def de (next (insta/parse re \\n                   \\"select student where id \= 2 limit 10 order by id join subject on id \= sid join sstudent on id \= ssid\\")))" "(next nil)" "(println de)" "(insta/transform {\:select \\r\\n                  (fn [tbl-nm] (hash-map \\r\\n                                 (tbl-nm 0) \\r\\n                                 (tbl-nm 1)))\\r\\n                  \:where\\r\\n                  (fn [column comp-op value] \\r\\n                    (hash-map \:where \\r\\n                              (create-cond \\r\\n                                (column 1) \\r\\n                                (comp-op 1) \\r\\n                                (value 1))))\\r\\n                  \:limit\\r\\n                  (fn [n]\\r\\n                    (hash-map \:limit\\r\\n                              (n 1)))\\r\\n                  \:order-by\\r\\n                  (fn [column]\\r\\n                    (hash-map \:order-by\\r\\n                              (column 1)))\\r\\n                  \:join\\r\\n                  (fn [other-table left-column right-column]\\r\\n                    (hash-map \:join\\n                              [(other-table 1)\\n                               (left-column 1)\\n                               (right-column 1)]))} de)" "(flatten ({\:table-name \\"student\\"} {\:where \#<query$create_cond$fn__3464 task02.query$create_cond$fn__3464@32dc44ff>} {\:limit \\"10\\"} {\:order-by \\"id\\"} {\:join [\\"subject\\" \\"id\\" \\"sid\\"]} {\:join [\\"sstudent\\" \\"id\\" \\"ssid\\"]}))" "(def er (insta/transform {\:select \\r\\n                  (fn [tbl-nm] (hash-map \\r\\n                                 (tbl-nm 0) \\r\\n                                 (tbl-nm 1)))\\r\\n                  \:where\\r\\n                  (fn [column comp-op value] \\r\\n                    (hash-map \:where \\r\\n                              (create-cond \\r\\n                                (column 1) \\r\\n                                (comp-op 1) \\r\\n                                (value 1))))\\r\\n                  \:limit\\r\\n                  (fn [n]\\r\\n                    (hash-map \:limit\\r\\n                              (n 1)))\\r\\n                  \:order-by\\r\\n                  (fn [column]\\r\\n                    (hash-map \:order-by\\r\\n                              (column 1)))\\r\\n                  \:join\\r\\n                  (fn [other-table left-column right-column]\\r\\n                    (hash-map \:join\\n                                      [(other-table 1)\\n                                       (left-column 1)\\n                                       (right-column 1)]))} de))" "(flatten er)" "(filter \#(\:join %) er)" "(key \\"hello\\")" "(keys \\"hello\\")" "(keyword \\"hello\\")" "(def er (insta/transform {\:select \\r\\n                  (fn [tbl-nm] (hash-map \\r\\n                                 (tbl-nm 0) \\r\\n                                 (tbl-nm 1)))\\r\\n                  \:where\\r\\n                  (fn [column comp-op value] \\r\\n                    (hash-map \:where \\r\\n                              (create-cond \\r\\n                                (column 1) \\r\\n                                (comp-op 1) \\r\\n                                (value 1))))\\r\\n                  \:limit\\r\\n                  (fn [n]\\r\\n                    (hash-map \:limit\\r\\n                              (n 1)))\\r\\n                  \:order-by\\r\\n                  (fn [column]\\r\\n                    (hash-map \:order-by\\r\\n                              (keyword (column 1))))\\r\\n                  \:join\\r\\n                  (fn [other-table left-column right-column]\\r\\n                    (hash-map \:join\\n                                      [(keyword (left-column 1))\\n                                       (other-table 1)\\n                                       (keyword (right-column 1))]))} de))" "(filter \#(\:join %) er)" "(loop [join (filter \#(\:join %) er)]\\n  {\:join join})" "(loop [join (filter \#(\:join %) er)]\\n  (\:join join))" "(loop [join (filter \#(\:join %) er)]\\n  (join \:join))" "(loop [join (filter \#(\:join %) er)]\\n  (\:join join))" "(loop [join (filter \#(\:join %) er)]\\n  (println join))" "(loop [join '(1 2 3 4)] (println join))" "(loop [join '(1 2 3 4)] \\n  (if-not join \\n    []\\n    (println join)))" "(loop [join '(1 2 3 4)] \\n  (if-not join \\n    []\\n    (recur join)))" "(loop [join '(1 2 3 4)] \\n  (if join \\n    []\\n    (recur join)))" "(if-not '(1 2 3))" "(+ 1 2)" "(if-not '(1 2 3))" "(if-not '(1 2 3) true false)" "(loop [join '(1 2 3 4)] \\n  (if-not join \\n    []\\n    (recur (next join))))" "(loop [join '(1 2 3 4)] \\n  (if-not join \\n    []\\n    ((println join)\\n      recur (next join))))" "(loop [join '(1 2 3 4)] \\n  (if-not join \\n    []\\n    ((println join)\\n      (recur (next join)))))" "(loop [join '(1 2 3 4)] \\n  (if-not join \\n    []\\n    (do (println join)\\n      (recur (next join)))))" "(loop [join (filter \#(\:join %) er)\\n       acc []]\\n  (if-not join\\n    acc\\n    (recur (next join) (conj (\:join join) acc))))" "(loop [join (filter \#(\:join %) er)\\n       acc []]\\n  (if-not join\\n    acc\\n    (recur (next join) (conj acc (\:join join)))))" "(filter \#(\:join %) er)" "((filter \#(\:join %) er) 0)" "(first (filter \#(\:join %) er))" "(\:join (first (filter \#(\:join %) er)))" "(loop [join (filter \#(\:join %) er)\\n     acc []]\\n(if-not join\\n  acc\\n  (recur (next join) (conj acc (\:join (first join))))))" "(loop [join (filter \#(\:join %) er)]\\n  (\:join join))" "(loop [join (filter \#(\:join %) er)\\n     acc []]\\n(if-not join\\n  acc\\n  (recur (next join) (conj acc (\:join (first join))))))" "(recur \:join (filter \:join er))" "(filter \:join er)" "(reduce \:join (filter \:join er))" "(reduce \:join [] (filter \:join er))" "(reduce \#(conj (\:join %1) %2) (filter \:join er))" "(reduce \#(conj (\:join %2) %1) (filter \:join er))" "(for [join er\\n      \:when (\:join join)])" "(for [join er\\n      \:when (\:join join)]\\n  join)" "(for [join er\\n      \:when (\:join join)]\\n  (\:join join))" "(for [join er\\n      \:when (\:join join)]\\n  (vec (\:join join)))" "(mapv \:join (filter \:join er))" "(def er (insta/transform {\:select \\r\\n                  (fn [tbl-nm] (hash-map \\r\\n                                 (tbl-nm 0) \\r\\n                                 (tbl-nm 1)))\\r\\n                  \:where\\r\\n                  (fn [column comp-op value] \\r\\n                    (hash-map \:where \\r\\n                              (create-cond \\r\\n                                (column 1) \\r\\n                                (comp-op 1) \\r\\n                                (value 1))))\\r\\n                  \:limit\\r\\n                  (fn [n]\\r\\n                    (hash-map \:limit\\r\\n                              (n 1)))\\r\\n                  \:order-by\\r\\n                  (fn [column]\\r\\n                    (hash-map \:order-by\\r\\n                              (keyword (column 1))))\\r\\n                  \:join\\r\\n                  (fn [other-table left-column right-column]\\r\\n                    (hash-map \:join\\n                                      [(keyword (left-column 1))\\n                                       (other-table 1)\\n                                       (keyword (right-column 1))]))} de))" "(println er)" "(filter \:join nil)" "(mapv nil)" "(mapv \:join nil)" "(flatten er)" "(hash-map re)" "(def not-joins (remove \:join er))" "(println not-joins)" "(hash-map er)" "(into {} not-joins)" "(into {} nil)" "(into {} not-joins)" "(def l (into {} not-joins))" "(into {} er)" "(1 2 (if (< 1 2) 3 ()))" "(1 2 (if (< 1 2) 3 _))" "(1 2 (if (< 1 2) 3 '()))" "(1 (1 2) (if (< 1 2) 3 '()))" "(1 (1 2) (if (< 1 2) 3 4))" "'(1 (1 2) (if (< 1 2) 3 4))" "(into {} er)" "(loop [c [\:where \:limit \:order-by]\\n       xs er\\n       acc ()]\\n  (if-not c\\n    acc\\n    (recur (next c) \\n           xs \\n           (conj ((first c) er) acc))))" "(loop [c [\:where \:limit \:order-by]\\n       xs er\\n       acc ()]\\n  (if-not c\\n    acc\\n    (recur (next c) \\n           xs \\n           (conj acc ((first c) er)))))" "(loop [c [\:where \:limit \:order-by]\\n       xs er\\n       acc ()]\\n  (if-not c\\n    acc\\n    (recur (next c) \\n           xs \\n           (conj acc ((first c) xs)))))" "(println er)" "(loop [c [\:where \:limit \:order-by]\\n       xs (into {} er)\\n       acc ()]\\n  (if-not c\\n    acc\\n    (recur (next c) \\n           xs \\n           (conj acc ((first c) xs)))))" "(into {} not-joins)" "(println joins)" "(mapcat {\:key1 \\"re\\"} {\:key2 \\"re\\"})" "(merge {\:key1 \\"re\\"} {\:key2 \\"re\\"})" "(merge {\:key1 \\"re\\"} nil)" "(merge nil nil)" "(into {} nil)" "(println joins)" "(println not-joins)" "(def joins (into {} joins))" "(def not-joins (into {} not-joins))" "(println not-joins)" "(loop [keys [\:table-name \:where \:order-by \:limit \:joins]\\n       acc ()]\\n  (if-not keys\\n    acc\\n    (recur (next keys) \\n           (conj acc \\n                 (first keys) \\n                 ((first keys) not-joins)))))" "(println joins)" "(println not-joins)" "(loop [keys [\:table-name \:where \:order-by \:limit \:joins]\\n       acc ()]\\n  (if-not keys\\n    acc\\n    (recur (next keys)\\n           (if-not ((first keys) not-joins)\\n             acc\\n             (conj acc \\n                 (first keys) \\n                 ((first keys) not-joins))))))" "(loop [keys [\:table-name \:where \:order-by \:limit \:joins]\\n       acc ()]\\n  (if-not keys\\n    acc\\n    (recur (next keys)\\n           (if-not ((first keys) not-joins)\\n             acc\\n             (conj acc \\n                 ((first keys) not-joins)\\n                 (first keys))))))" "(loop [keys [\:where \:order-by \:limit \:joins]\\n       acc (\:table-name not-joins)]\\n  (if-not keys\\n    acc\\n    (recur (next keys)\\n           (if-not ((first keys) not-joins)\\n             acc\\n             (conj acc \\n                 ((first keys) not-joins)\\n                 (first keys))))))" "(loop [keys [\:where \:order-by \:limit \:joins]\\n       acc ((\:table-name not-joins))]\\n  (if-not keys\\n    acc\\n    (recur (next keys)\\n           (if-not ((first keys) not-joins)\\n             acc\\n             (conj acc \\n                 ((first keys) not-joins)\\n                 (first keys))))))" "(loop [keys [\:where \:order-by \:limit \:joins]\\n       acc '((\:table-name not-joins))]\\n  (if-not keys\\n    acc\\n    (recur (next keys)\\n           (if-not ((first keys) not-joins)\\n             acc\\n             (conj acc \\n                 ((first keys) not-joins)\\n                 (first keys))))))" "(loop [keys [\:where \:order-by \:limit \:joins]\\n       acc (list (\:table-name not-joins))]\\n  (if-not keys\\n    acc\\n    (recur (next keys)\\n           (if-not ((first keys) not-joins)\\n             acc\\n             (conj acc \\n                 ((first keys) not-joins)\\n                 (first keys))))))" "(loop [keys [\:where \:order-by \:limit \:joins]\\n       acc (list (\:table-name not-joins))]\\n  (if-not keys\\n    acc\\n    (recur (next keys)\\n           (if-not ((first keys) not-joins)\\n             acc\\n             (conj \\n                 ((first keys) not-joins)\\n                 (first keys)\\n                 acc)))))" "(conj '(1 2 3 4) 5 6 7)" "(loop [keys [\:table-name \:where \:order-by \:limit \:joins]\\n       acc []]\\n  (if-not keys\\n    acc\\n    (recur (next keys)\\n           (if-not ((first keys) not-joins)\\n             acc\\n             (conj acc \\n                 ((first keys) not-joins)\\n                 (first keys))))))" "(loop [keys [\:table-name \:where \:order-by \:limit \:joins]\\n       acc []]\\n  (if-not keys\\n    acc\\n    (recur (next keys)\\n           (if-not ((first keys) not-joins)\\n             acc\\n             (conj acc \\r\\n                 (first keys)\\n                 ((first keys) not-joins))))))" "(list [1 2 3])" "(map '[1 2 3])" "(map _ '[1 2 3])" "(seq '[1 2 3])" "(seq nil)" "(nil nil)" "[\:key nil]" "(\:key nil)" "(parse-select \\"select students\\")" "(defn parse-select [^String sel-string]\\r\\n  (let [parsed-data (-> (parser sel-string)\\r\\n                        (next)\\r\\n                        (transform))\\r\\n        joins-data (-> (filter \:join parsed-data)\\r\\n                       (mapv \:join))\\r\\n        not-joins-data (-> (remove \:join parsed-data)\\r\\n                           (into {}))\\r\\n        data (merge joins-data not-joins-data)]\\r\\n    (loop [meta-keys [\:select \:where \:order-by \:limit \:joins]\\r\\n           acc []]\\r\\n     (if-not meta-keys\\r\\n       (next (seq acc))\\r\\n       (recur \\r\\n         (next meta-keys)\\r\\n          (let [meta-key (first meta-keys)\\r\\n                elem (key data)]\\r\\n            (if-not elem\\r\\n              acc\\r\\n              (conj acc meta-key elem))))))))" "(parsed-data (-> (parser sel-string)\\r\\n                        (next)\\r\\n                        (transform)))" "(def sel-string \\"select students\\")" "parsed-data (-> (parser sel-string)\\r\\n                        (next)\\r\\n                        (transform))" "(parsed-data (-> (parser sel-string)\\r\\n                        (next)\\r\\n                        (transform)))" "(println parser)" "(parsed-data (-> (parser sel-string)\\r\\n                        (next)\\r\\n                        (transform)))" "(def parsed-data (-> (parser sel-string)\\r\\n                        (next)\\r\\n                        (transform)))" "(println parse-data)" "(println parsed-data)" "(def joins-data (-> (filter \:join parsed-data)\\r\\n                       (mapv \:join)))" "(-> (filter \:join parsed-data)\\r\\n(mapv \:join))" "(->> (filter \:join parsed-data)\\r\\n(mapv \:join))" "(def joins-data (->> (filter \:join parsed-data)\\r\\n                       (mapv \:join)))" "(-> (remove \:join parsed-data)\\r\\n                           (into {}))" "(->> (remove \:join parsed-data)\\r\\n                           (into {}))" "(->> (parser sel-string)\\r\\n                        (next)\\r\\n                        (transform)" "(->> (parser sel-string)\\r\\n                        (next)\\r\\n                        (transform))" "(parse-select \\"select students\\")" "(let [parsed-data (->> (parser sel-string)\\r\\n                        (next)\\r\\n                        (transform))\\r\\n        joins-data (->> (filter \:join parsed-data)\\r\\n                       (mapv \:join))\\r\\n        not-joins-data (->> (remove \:join parsed-data)\\r\\n                           (into {}))\\r\\n        data (merge joins-data not-joins-data)]\\n  (prinln data))" "(let [parsed-data (->> (parser sel-string)\\r\\n                        (next)\\r\\n                        (transform))\\r\\n        joins-data (->> (filter \:join parsed-data)\\r\\n                       (mapv \:join))\\r\\n        not-joins-data (->> (remove \:join parsed-data)\\r\\n                           (into {}))\\r\\n        data (merge joins-data not-joins-data)]\\n  (println data))" "(let [parsed-data (->> (parser sel-string)\\r\\n                        (next)\\r\\n                        (transform))\\r\\n        joins-data (->> (filter \:join parsed-data)\\r\\n                       (mapv \:join))\\r\\n        not-joins-data (->> (remove \:join parsed-data)\\r\\n                           (into {}))\\r\\n        data (merge joins-data not-joins-data)]\\n  (do \\n    (println data)\\n    (println joins-data)\\n    (println not-joins-data)))" "(merge [] '(12 32))" "(merge '(12 32) [])" "(into {} [])" "(parse-select \\"select students\\")" "(let [parsed-data (->> (parser sel-string)\\r\\n                        (next)\\r\\n                        (transform))\\r\\n        joins-data (->> (filter \:join parsed-data)\\r\\n                       (mapv \:join)\\r\\n                       (into {}))\\r\\n        not-joins-data (->> (remove \:join parsed-data)\\r\\n                           (into {}))\\r\\n        data (merge joins-data not-joins-data)]\\n  (println data))" "(loop [meta-keys [\:select \:where \:order-by \:limit \:joins]\\r\\n           acc []]\\r\\n     (if-not meta-keys\\r\\n       (next (seq acc))\\r\\n       (recur \\r\\n         (next meta-keys)\\r\\n          (let [meta-key (first meta-keys)\\r\\n                elem (key {\:select \\"students\\"})]\\r\\n            (if-not elem\\r\\n              acc\\r\\n              (conj acc meta-key elem))))))" "(loop [meta-keys [\:select \:where \:order-by \:limit \:joins]\\r\\n           acc []]\\r\\n     (if-not meta-keys\\r\\n       (next (seq acc))\\r\\n       (recur \\r\\n         (next meta-keys)\\r\\n          (let [meta-key (first meta-keys)\\r\\n                elem (key {\:select \\"students\\"})]\\r\\n            (if-not elem\\r\\n              acc\\r\\n              (conj acc elem elem))))))" "(loop [meta-keys [\:select \:where \:order-by \:limit \:joins]\\r\\n           acc []]\\r\\n     (if-not meta-keys\\r\\n       (next (seq acc))\\r\\n       (recur \\r\\n         (next meta-keys)\\n         (do\\n           (println first meta-keys)\\r\\n          (let [meta-key (first meta-keys)\\r\\n                elem (key {\:select \\"students\\"})]\\r\\n            (if-not elem\\r\\n              acc\\r\\n              (conj acc elem elem)))))))" "(loop [meta-keys [\:select \:where \:order-by \:limit \:joins]\\r\\n           acc []]\\r\\n     (if-not meta-keys\\r\\n       (next (seq acc))\\r\\n       (recur \\r\\n         (next meta-keys)\\n         (do\\n           (println (first meta-keys))\\r\\n          (let [meta-key (first meta-keys)\\r\\n                elem (key {\:select \\"students\\"})]\\r\\n            (if-not elem\\r\\n              acc\\r\\n              (conj acc elem elem)))))))" "(loop [meta-keys [\:select \:where \:order-by \:limit \:joins]\\r\\n           acc []]\\r\\n     (if-not meta-keys\\r\\n       (next (seq acc))\\r\\n       (recur \\r\\n         (next meta-keys)\\n         (do\\n           (println ((first meta-keys) {\:select \\"students\\"}))\\r\\n          (let [meta-key (first meta-keys)\\r\\n                elem (key {\:select \\"students\\"})]\\r\\n            (if-not elem\\r\\n              acc\\r\\n              (conj acc elem elem)))))))" "(loop [meta-keys [\:select \:where \:order-by \:limit \:joins]\\r\\n           acc []]\\r\\n     (if-not meta-keys\\r\\n       (next (seq acc))\\r\\n       (recur \\r\\n         (next meta-keys)\\r\\n          (let [meta-key (first meta-keys)\\r\\n                elem (key {\:select \\"students\\"})]\\n            (do (println meta-key)\\r\\n            (if-not elem\\r\\n              acc\\r\\n              (conj acc elem elem)))))))" "(loop [meta-keys [\:select \:where \:order-by \:limit \:joins]\\r\\n           acc []]\\r\\n     (if-not meta-keys\\r\\n       (next (seq acc))\\r\\n       (recur \\r\\n         (next meta-keys)\\r\\n          (let [meta-key (first meta-keys)\\r\\n                elem (key {\:select \\"students\\"})]\\n            (do\\n              (println elem)\\n              (println meta-key)\\r\\n            (if-not elem\\r\\n              acc\\r\\n              (conj acc elem elem)))))))" "(loop [meta-keys [\:select \:where \:order-by \:limit \:joins]\\r\\n           acc []]\\r\\n     (if-not meta-keys\\r\\n       (next (seq acc))\\r\\n       (recur \\r\\n         (next meta-keys)\\r\\n          (do\\r\\n              (println (first meta-keys))\\r\\n              (println (key {\:select \\"students\\"}))\\n            (let [meta-key (first meta-keys)\\r\\n                elem (key {\:select \\"students\\"})]\\n            \\r\\n            (if-not elem\\r\\n              acc\\r\\n              (conj acc elem elem)))))))" "(loop [meta-keys [\:select \:where \:order-by \:limit \:joins]\\r\\n           acc []]\\r\\n     (if-not meta-keys\\r\\n       (next (seq acc))\\r\\n       (recur \\r\\n         (next meta-keys)\\r\\n          (do\\r\\n              (println (first meta-keys))\\r\\n              (println (key {\:select \\"students\\"}))\\r\\n              (println (first meta-keys))\\n            (let [meta-key (first meta-keys)\\r\\n                elem (key {\:select \\"students\\"})]\\n            \\r\\n            (if-not elem\\r\\n              acc\\r\\n              (conj acc elem elem)))))))" "(parse-select \\"select students\\")" "(parse-select \\"select students where id \= 2\\")" "(parse-select \\"select students where id \= 2 limit 10\\")" "(\= 1 \\"1\\")" "(parse-select \\n  \\"select students where id \= 2 limit 10 order by id\\")" "(parse-select \\n  \\"select students where id \= 2 limit 10 order by id join subject on id \= sid\\")" "(parse-select \\n  \\"select students where id \= 2 limit 10 order by id\\")" "(parse-select \\n  \\"dsf\\")" "(parse-select \\n  \\"select students where id \= 2 limit 10 order by id\\")" "(->> (parser \\"\\")\\r\\n                        (next)\\r\\n                        (transform))" "(parser \\"\\")" "(println (parser \\"\\"))" "(->> nil\\n  (next))" "(->> nil\\n  (next)\\n  (transform))" "(parser \\"\\")" "(parse-select \\n  \\"dsf\\")" "(parse-select \\n  \\"\\")" "(parse-select \\n  \\"select students where id \= 2 limit 10 order by id\\")" "(conj '(1 2 3) \:joins [[\:key1 1][\:key2 2]])" "(parse-select \\n  \\"select students where id \= 2 limit 10 order by id join subject on id \= sid\\")" "(parse-select \\n  \\"select students where id \= 2 limit 10 order by id join subject on id \\")" "(def sel-string\\n  \\"select students where id \= 2 limit 10 order by id join subject on id \= sid\\")" "(def parsed-data (->> (parser sel-string)\\r\\n                        (next)\\r\\n                        (transform)))" "(def joins-data (->> (filter \:join parsed-data)\\r\\n                       (mapv \:join)\\r\\n                       (into {})))" "(println parsed-data)" "(filter \:join parsed-data)" "(->>\\n  (filter \:join parsed-data)\\n  (mapv \:join))" "(->>\\n  (filter \:join parsed-data)\\n  (mapv \:join)\\n  (into {}))" "(->>\\n  ()\\n  (mapv \:join)\\n  (into {}))" "(->>\\n  (filter \:join parsed-data)\\n  (mapv \:join)\\n  (into {}))" "(->>\\n  (filter \:join parsed-data)\\n  (mapv \:join))" "(into {} [[\:subject \\"id\\" \:sid]])" "(into {} [[\:subject \\"id\\" \:sid \\"re\\"]])" "(into {} [[\:subject \\"id\\" \:sid \\"re\\"] \\"re\\"])" "(->>\\n  (filter \:join parsed-data))" "(filter \:join parsed-data)" "(mapv \:join ({\:join [\:subject \\"id\\" \:sid]}))" "(mapv \:join \\n      ({\:join [\:subject \\"id\\" \:sid]}))" "(mapv \:join \\n      '({\:join [\:subject \\"id\\" \:sid]}))" "(->> ({\:join [\:subject \\"id\\" \:sid]})\\n  (if (\= 1 1)\\n    (filter \:join)\\n    (filter \:join)))" "(->> ({\:join [\:subject \\"id\\" \:sid]})\\n  (if (\= 1 1)\\n    nil))" "(->> ({\:join [\:subject \\"id\\" \:sid]})\\n  (if (\= 0 1)\\n    nil))" "(->> \\r\\n                      (parser sel-string)\\r\\n                      (next)\\r\\n                      (transform))" "(into {} [[]])" "(into {} [[] []])" "(into [[] []])" "(into {} [[] []] [1])" "(into {} '[[] []])" "(into {} '[[1] [2]])" "(into {} '[1 2])" "(into {} [[1 2] [3 4]])" "(into {} [[1 2] [3 ]])" "(into {} [[1 2] [3 4]])" "(into {} [3 4])" " (->>\\r\\n                     (filter \:join parsed-data)\\r\\n                     (map \:join)\\r\\n                     (into []))" " (->>\\r\\n                     nil\\r\\n                     (map \:join)\\r\\n                     (into []))" "(->> \\r\\n                         (remove \:join parsed-data)\\r\\n                         (into {}))" "(->>\\r\\n                     (filter \:join parsed-data)\\r\\n                     (map \:join))" "(if (\:join {\:join []}) (println \\"hello\\")\\n  (println \\"hi\\"))" "(println (\:join {\:join []}))" "(if nil (println \\"hello\\")\\n  (println \\"hi\\"))" "(if (\:join {\:join nil}) (println \\"hello\\")\\n  (println \\"hi\\"))" "(remove \:filter parsed-data)" "(remove \:filter \\n        ({\:select \\"students\\"} {\:limit \\"10\\"} {\:order-by \:id} {\:join [\:subject \\"id\\" \:sid]}))" "(remove \:filter\\n        ({select \\"st\\"}))" "(filter \:join\\n        ({select \\"st\\"}))" "(filter \:join\\n        '({select \\"st\\"}))" "(map \:join ())" "(into [] ())" "(if '() (println \\"hello\\") (println \\"hi\\"))" "(if (empty? '()) (println \\"hello\\") (println \\"hi\\"))" "(if-not (empty? '()) (println \\"hello\\") (println \\"hi\\"))" "(if '(1 2) (println \\"hello\\") (println \\"hi\\"))" "(into {} (remove \:join parsed-data))" "(parsed-data (->> \\r\\n                      (parser sel-string)\\r\\n                      (next)\\r\\n                      (transform)))" "(def parsed-data (->> \\r\\n                      (parser sel-string)\\r\\n                      (next)\\r\\n                      (transform)))" "(def joins-data (->>\\r\\n                     (filter \:join parsed-data)\\r\\n                     (map \:join)\\r\\n                     (into [])))" "(def raw-not-joins-data (remove \:join parsed-data))" "(def not-joins-data (if-not (empty? raw-not-joins-data)\\r\\n                         nil\\r\\n                         (into {} raw-not-joins-data)))" "(println not-joins-data)" "(println parsed-data)" "(println raw-not-joins-data)" "(def raw-not-joins-data (filter \:join parsed-data))" "(def not-joins-data (if-not (empty? raw-not-joins-data)\\r\\n                         nil\\r\\n                         (into {} raw-not-joins-data)))" "(println not-joins-data)" "(println (empty? raw-not-joins-data))" "(def not-joins-data (if (empty? raw-not-joins-data)\\r\\n                         nil\\r\\n                         (into {} raw-not-joins-data)))" "(println not-joins-data)" "(merge not-joins-data nil)" "(def sel-string\\n  \\"select students where id \= 2 limit 10 order by id join subject on id \= sid\\")" "(parse-slect sel-string)" "(parse-select sel-string)" "(def sel-string\\n  \\"select students where id \= 2 limit 10 order by id\\")" "(parse-select sel-string)" "(def sel-string\\n  \\"select students where id \= 2 limit 10 order by id join subject on id \= sid\\")" "(def parsed-data (->> \\r\\n                      (parser sel-string)\\r\\n                      (next)\\r\\n                      (transform)))" "(def joins-data (->>\\r\\n                     (filter \:join parsed-data)\\r\\n                     (map \:join)\\r\\n                     (into [])))" "(def raw-not-joins-data (filter \:join parsed-data))" "(def not-joins-data (if (empty? raw-not-joins-data)\\r\\n                         nil\\r\\n                         (into {} raw-not-joins-data)))" "(def data (merge joins-data not-joins-data))" "(println data)" "(println joins-data)" "(->>\\r\\n                         (filter \:join parsed-data)\\r\\n                         (map \:join)\\r\\n                         (into []))" "(->> '()\\r\\n                         (map \:join)\\r\\n                         (into []))" "(merge {\:key 1 \:key2 2} [])" "(merge {\:key 1 \:key2 2} nil)" "(merge {\:key 1 \:key2 2} '())" "(merge {\:key 1 \:key2 2} '[])" "(->>\\r\\n                         (filter \:join parsed-data)\\r\\n                         (map \:join))" "(into {} '([\:subject \\"id\\" \:sid]))" "(into [] '([\:subject \\"id\\" \:sid]))" "(into [] '())" "(def sel-string\\n  \\"select students where id \= 2 limit 10 order by id join subject on id \= sid\\")" "(parse-select sel-string)" "(hash-map \:joins [])" "(parse-select sel-string)" "(def sel-string\\n  \\"select students where id \= 2 limit 10 order by id\\")" "(parse-select sel-string)" "(def sel-string\\n  \\"select students where id \= 2 limit 10 order by id\\")" "(parse-select sel-string)" "(def sel-string\\n  \\"select students where id \= 2 limit 10 order by id join subject on id \= sid\\")" "(parse-select sel-string)" "('(1 2 3) 1)" "(nth '(1 2 3) 1)" "(parse-select sel-string)" "(make-where-function \\"id\\" \\"\=\\" \\"1\\")" "((make-where-function \\"id\\" \\"\=\\" \\"1\\"))" "(println (make-where-function \\"id\\" \\"\=\\" \\"1\\"))" "((make-where-function \\"id\\" \\"\=\\" \\"1\\")\\n  {\:id 12})" "((make-where-function \\"id\\" \\"\=\\" \\"1\\")\\n  {\:id 1})" "(\:id {\:id 12})" "((make-where-function \\"id\\" \\"\=\\" \\"1\\")\\n  {\:id 1})" "((make-where-function \\"id\\" \\"\=\\" \\"1\\")\\n  {\:id 12})" "(def args (\\"id\\" \\"\=\\" \\"1\\"))" "(def args '(\\"id\\" \\"\=\\" \\"1\\"))" "(println args)" "(let [column (keyword (nth args 0))\\r\\n        cond-fun (nth args 1)\\r\\n        value (nth args 2)]\\r\\n   (match [cond-fun]\\r\\n    [\\"\=\\"] \#(\= (column %) value)\\r\\n    [\\"\!\=\\"] \#(not (\= (column %) value))\\r\\n    [\\"<\\"] \#(< (column %) value)\\r\\n    [\\">\\"] \#(> (column %) value)\\r\\n    [\\"<\=\\"] \#(<\= (column %) value)\\r\\n    [\\">\=\\"] \#(>\= (column %) value)))" "((let [column (keyword (nth args 0))\\r\\n        cond-fun (nth args 1)\\r\\n        value (nth args 2)]\\r\\n   (match [cond-fun]\\r\\n    [\\"\=\\"] \#(\= (column %) value)\\r\\n    [\\"\!\=\\"] \#(not (\= (column %) value))\\r\\n    [\\"<\\"] \#(< (column %) value)\\r\\n    [\\">\\"] \#(> (column %) value)\\r\\n    [\\"<\=\\"] \#(<\= (column %) value)\\r\\n    [\\">\=\\"] \#(>\= (column %) value))) {\:id 1})" "((let [column (keyword (nth args 0))\\r\\n        cond-fun (nth args 1)\\r\\n        value (nth args 2)]\\r\\n   (match [cond-fun]\\r\\n    [\\"\=\\"] \#((do (println \\"hello\\") (\= (column %) value)))\\r\\n    [\\"\!\=\\"] \#(not (\= (column %) value))\\r\\n    [\\"<\\"] \#(< (column %) value)\\r\\n    [\\">\\"] \#(> (column %) value)\\r\\n    [\\"<\=\\"] \#(<\= (column %) value)\\r\\n    [\\">\=\\"] \#(>\= (column %) value))) {\:id 1})" "(let [column (keyword (nth args 0))\\r\\n        cond-fun (nth args 1)\\r\\n        value (nth args 2)]\\r\\n   (match [cond-fun]\\r\\n    [\\"\=\\"] \#(\= (column %) value)\\r\\n    [\\"\!\=\\"] \#(not (\= (column %) value))\\r\\n    [\\"<\\"] \#(< (column %) value)\\r\\n    [\\">\\"] \#(> (column %) value)\\r\\n    [\\"<\=\\"] \#(<\= (column %) value)\\r\\n    [\\">\=\\"] \#(>\= (column %) value)))" "((let [column (keyword (nth args 0))\\r\\n        cond-fun (nth args 1)\\r\\n        value (nth args 2)]\\r\\n   (match [cond-fun]\\r\\n    [\\"\=\\"] \#((do (println \\"hello\\") (\= (column %) value)))\\r\\n    [\\"\!\=\\"] \#(not (\= (column %) value))\\r\\n    [\\"<\\"] \#(< (column %) value)\\r\\n    [\\">\\"] \#(> (column %) value)\\r\\n    [\\"<\=\\"] \#(<\= (column %) value)\\r\\n    [\\">\=\\"] \#(>\= (column %) value))) {\:id 1})" "((let [column (keyword (nth args 0))\\r\\n        cond-fun (nth args 1)\\r\\n        value (nth args 2)]\\r\\n   (match [cond-fun]\\r\\n    [\\"\=\\"] \#(\= (column %) value)\\r\\n    [\\"\!\=\\"] \#(not (\= (column %) value))\\r\\n    [\\"<\\"] \#(< (column %) value)\\r\\n    [\\">\\"] \#(> (column %) value)\\r\\n    [\\"<\=\\"] \#(<\= (column %) value)\\r\\n    [\\">\=\\"] \#(>\= (column %) value))) {\:id 1})" "((let [column (keyword (nth args 0))\\r\\n        cond-fun (nth args 1)\\r\\n        value (nth args 2)]\\r\\n   (match [cond-fun]\\r\\n    [\\"\=\\"] \#(\= (column %) value)\\r\\n    [\\"\!\=\\"] \#(not (\= (column %) value))\\r\\n    [\\"<\\"] \#(< (column %) value)\\r\\n    [\\">\\"] \#(> (column %) value)\\r\\n    [\\"<\=\\"] \#(<\= (column %) value)\\r\\n    [\\">\=\\"] \#(>\= (column %) value))) {\:id 12})" "(keyword (nth args 0))" "(match [(nth args 1)] [\\"\=\\"] (println \\"hello\\"))" "(match [(nth args 1)] [\\"\=\\"] \\n       (\#(\= (column (nth args 0) %) (nth args 2)) {\:id 1}))" "(match [(nth args 1)] [\\"\=\\"] \\n       (\#(\= \\n           ((nth args 0) (nth args 0) %) \\n           (nth args 2)) \\n         {\:id 1}))" "(match [(nth args 1)] [\\"\=\\"] \\n       (\#(\= \\n           ((keyword (nth args 0)) (nth args 0) %) \\n           (nth args 2)) \\n         {\:id 1}))" "(println args)" "(def args (list \\"id\\" \\"\=\\" \\"1\\"))" "(println args)" "(match [(nth args 1)] [\\"\=\\"] \\n       (\#(\= \\n           ((keyword (nth args 0)) (nth args 0) %) \\n           (nth args 2)) \\n         {\:id 1}))" "(match [(nth args 1)] [\\"\=\\"] \\n       (\#(\= \\n           ((keyword (nth args 0)) (nth args 0) %) \\n           (nth args 2)) \\n         {\:id \\"1\\"}))" "(\= ((keyword (nth args 0)) \\n     (nth args 0) {\:id \\"1\\"}) \\r\\n  (nth args 2))" "(\= ((keyword (nth args 0)\\n             {\:id \\"1\\"})) \\r\\n  (nth args 2))" "(\= (keyword (nth args 0)\\n             {\:id \\"1\\"})\\r\\n  (nth args 2))" "(\= ((keyword (nth args 0))\\n             {\:id \\"1\\"})\\r\\n  (nth args 2))" "((make-where-function \\"id\\" \\"\=\\" \\"1\\")\\n  {\:id \\"1\\"})" "((make-where-function \\"id\\" \\"\=\\" \\"1\\")\\n  {\:id \\"2\\"})" "(insert student {\:id 10 \:surname \\"Test\\" \:year 2000})" "(q/perform-query \\"select student where id \= 10\\")" "(require [task02.query \:as q])" "(perform-query \\"select student where id \= 10\\")" "(parse-select \\"select student where id \= 10\\")" "(def query (parse-select \\"select student where id \= 10\\"))" "(get-table (first query))" "(first query)" "(rest query)" "(apply select (get-table (first query)) (rest query))" "@(get-table (first query))" "(def dd @(get-table (first query)))" "(-> dd\\n  (perform-joins joins)\\r\\n      (where* where)\\r\\n      (order-by* order-by)\\r\\n      (limit* limit))" "(apply select (get-table (first query)) (rest query))" "(rest query)" "(.startWith \\"s\\" \\"p\\")" "(.startsWith \\"s\\" \\"p\\")" "(\= (.replaceAll \\"3234\\" \\"^[0-9]\\") raw-value)" "(\= (.replaceAll \\"3234\\" \\"^[0-9]\\") \\"3234\\")" "(\= (.replaceAll \\"3234\\" \\"^[0-9]\\" \\"\\") \\"3234\\")" "(\= (.replaceAll \\"3234\\" \\"[0-9]\\" \\"\\") \\"3234\\")" "(println (.replaceAll \\"3234\\" \\"[0-9]\\" \\"\\"))" "(println (.replaceAll \\"3234\\" \\"^[0-9]\\" \\"\\"))" "(println (.replaceAll \\"3234\\" \\"^[0-9]*\\" \\"\\"))" "(println (.replaceAll \\"3234\\" \\"[0-9]*\\" \\"\\"))" "(println (.replaceAll \\n           \\"3234\\" \\"^[0-9]+\\" \\"\\"))" "(println (.replaceAll \\n           \\"3234\\" \\"[a-zA-Z]\\" \\"\\"))" "(println (.replaceAll \\n           \\"3234d\\" \\"[a-zA-Z]\\" \\"\\"))" "(println (.replaceAll \\n           \\"3234\\" \\"[0-9]\\" \\"\\"))" "(println (.replaceAll \\n           \\"3234a\\" \\"[0-9]\\" \\"\\"))" "(parse-select \\"werfwefw\\")" "(parse-select \\"select student where id \= 10 order by id limit 2 join subject on id \= sid\\")" "(def sel-string \\"werfwefw\\")" "(def parsed-data \\r\\n          (->> \\r\\n            (parser sel-string)\\r\\n            (next)\\r\\n            (transform)))" "(println parsed-data)" "(def parsed-data \\r\\n          (->> \\r\\n            (parser sel-string)\\r\\n            (next)\\r\\n            (transform)))" "(println parsed-data)" "(parser sel-string)" "(println (parser sel-string))" "(next ((parser sel-string)))" "(next (parser sel-string))" "(parser sel-string)" "(def sel-string \\"werfwefw\\")" "(next (parser sel-string))" "(parser sel-string)" "(println (parser sel-string))" "(next (parser sel-string))" "(println (next (parser sel-string)))" "(nil? (next (parser sel-string)))" "(first (next (parser sel-string)))" "(try (parser sel-string) \\n  (catch Exception e (println e)))" "(try (parser sel-string) \\n  (catch Exception e (println \\"hello\\")))" "(nil? (next (parser sel-string)))" "(try (parser sel-string) \\n  (catch Exception e (println \\"hello\\")))" "(first (next (parser sel-string)))" "(parser sel-string)" "(first (parser sel-string))" "(first (parser \\"select dfs\\"))" "(parser \\"select dfs\\")" "(parser sel-string)" "(first (parser \\"select dfs\\"))" "(first (parser \\"selectsdfs\\"))" "(def sel-string \\"werfwefw\\")" "(first (parser \\"select dfs\\"))" "(first (parser \\"selefs\\"))" "(insta/failure (insta/parser slect-pattern))" "(insta/failure? (insta/parser slect-pattern))" "(insta/failure? \\n  (insta/parser select-pattern))" "(insta/failure? \\n  (insta/parser \\"sdf\\"))" "(parse \\"sdf\\")" "(parse-select \\"sdf\\")" "(parse-select \\"select sdf\\")" "(parse-select \\"select sdf where id \= 1\\")" "(parse \\"select fds\\")" "(parse \\"select fds-df\\")" "(parse \\"select fds_df\\")" "(parse \\"selEct fds_df\\")" "(.substring \\"hello\\" 0 3)" "(.substring \\"hello\\" 1 3)" "(.substring \\"hello\\" 1 4)" "(.lowerCase \\"dfDFD\\")" "(.toLowerCase nil)" "(parse \\"selEct fds_df\\")" "(parse \\"select fds_df\\")" "(parse \\"selEct fds_df\\")" "(parse \\"select fds_df\\")" "(parse \\"select fds_df where id \= 3\\")" "(parse \\"select fds_df where id \= 3343\\")" "(perform-query \\"select student where year \= 1997\\")" "(def sel-string\\n  \\"select student where year \= 1997\\")" "(def query (parse-select sel-string))" "(parse-select sel-string)" "(parse sel-string)" " (->>\\r\\n            (parse sel-string)\\r\\n            (next)\\r\\n            (transform))" "(qperform-query \\"select student where id \= 1\\")" "(perform-query\\n  \\"select student where id \= 1\\")" "(update student {\:year 2000} \:where (q/make-where-function \\"id\\" \\"\=\\" \\"1\\"))" "(update student \\n        {\:year 2000} \\n        \:where (make-where-function \\"id\\" \\"\=\\" \\"1\\"))" "(perform-query\\n  \\"select student where id \= 1\\")" "(update student \\n        {\:year 2000} \\n        \:where (make-where-function \\"id\\" \\"\=\\" \\"1\\"))" "((make-where-function \\"id\\" \\"\=\\" \\"1\\") 1)" "((make-where-function \\"id\\" \\"\=\\" \\"1\\") \\"1\\")" "(run 9999)" "(task02.network/run 9999)"]
eclipse.preferences.version=1
