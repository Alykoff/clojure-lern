cmdhistory=["(print \\"hello\\")" "(print student-tbl)" "(in-ns 'csvdb.core)" "(println student-tbl)" "(first student-tbl)" "(vec (first (student-tbl)))" "(map keyword (first student-tbl))" "(vec (map keyword (first student-tbl)))" "(key-value-pairs (table-keys student-tbl) student-tbl)" "(flatten (map (table-keys student-tbl) student-tbl))" "(flatten '(1 2 3 (1 2 3) (22)))" "(flatten '[1 2 3 (1 2)])" "(map '(1 2 3 4) '(a b c d))" "(map '(1 2 3 4) '(\\"a\\" \\"b\\" \\"c\\" \\"d\\"))" "(map '(\:a \:b \:c \:d) '(1 2 3 4))" "({\:a 1} '(1 2))" "({1 \:a} '(1 2))" "(get [1 2 3 4 5] 0)" "(zipmap [\:id \:name] [\\"1\\" \\"2\\"])" "(flatten (zipmap [\:id \:name] [\\"1\\" \\"2\\"]))" "(list (zipmap [\:id \:name] [\\"1\\" \\"2\\"]))" "(def kk [\:id \:name])" "(def vv [\\"1\\" \\"2\\"])" "(zipmap (list kk) (list vv))" "(zipmap kk vv)" "(flatten (zipmap kk vv))" "(list (zipmap kk vv))" "(for [k kk\\n      v vv]\\n  {k v})" "(list {\:id 1})" "(flatten (list {\:id 1}))" "kk" "(list kk)" "(map list kk)" "(flatten map list kk)" "(flatten (map list kk))" "(zipmap (+ 1) (1 2 3 4))" "(zipmap kk vv)" "(map list (zipmap kk vv))" "(map flatten (zipmap kk vv))" "(flatten (map flatten (zipmap kk vv)))" "(hash-map key1\: 1 key1\: 2)" "(hash-map key1\: 1, key2\: 2)" "(hash-map \:key1 1 \:key1 2)" "(seq \\"abcd\\")" "(hash-map kk vv)" "(apply [1 2 3])" "(apply max\\n       [1 2 3])" "(map flatten (zipmap tbl-keys tbl-record))" "(map flatten (zipmap kk vv))" "(zipmap kk vv)" "(map kk vv)" "(hash-map (key-value-pairs kk vv))" "(apply (hash-map (key-value-pairs kk vv)))" "(hash-map (apply (key-value-pairs kk vv)\\n                 ))" "(hash-map (apply \\n            key-value-pairs kk vv))" "(apply hash-map (key-value-pairs kk vv))" "(key-value-pairs kk vv)" "(next (1 2 3 4))" "(next '(1 2 3 4))" "(student-tbl)" "(println student-tbl)" "(data-table student-tbl)" "(let [keys (table-keys tbl)\\n      values (next tbl)]\\n  (map (data-record keys) values))" "(let [keys (table-keys student-tbl)\\r\\n         values (next student-tbl)]\\r\\n     (map (data-record keys) values))" "(def keys (table-keys student-tbl))" "(let [columns-name (table-keys tbl)\\r\\n      values (next tbl)]\\r\\n  (map (data-record columns-name) values))" "(def tbl student-tbl)" "(let [columns-name (table-keys tbl)\\r\\n      values (next tbl)]\\r\\n  (map (data-record columns-name) values))" "(def columns-name (table-keys tbl))" "(pritnln columns-name)" "(println columns-name)" "(def \\n  values (next tbl))" "(println values)" "(map \#(data-record columns-name) values)" "\\n(map (data-record columns-name) values)" "(map (data-record columns-name %) values)" "(map \#(data-record columns-name %) values)" "(data-table tbl)" "(str-field-to-int \:id {\:surname \\"Ivanov\\", \:year \\"1996\\", \:id \\"1\\"})" "(get {\:surname \\"Ivanov\\", \:year \\"1996\\", \:id \\"1\\"} \:id)" "(assoc {\:surname \\"Ivanov\\", \:year \\"1996\\", \:id \\"1\\"} \:id 1)" "(Integer/parseInt \\"1\\")" "(Integer/parseInt (get {\:surname \\"Ivanov\\", \:year \\"1996\\", \:id \\"1\\"} \:id))" " (assoc rec field ((Integer/parseInt (get rec field))))" "(assoc {\:surname \\"Ivanov\\", \:year \\"1996\\", \:id \\"1\\"} \:id ((Integer/parseInt (get {\:surname \\"Ivanov\\", \:year \\"1996\\", \:id \\"1\\"} \:id))))" "(assoc {\:surname \\"Ivanov\\", \:year \\"1996\\", \:id \\"1\\"} \:id (Integer/parseInt (get {\:surname \\"Ivanov\\", \:year \\"1996\\", \:id \\"1\\"} \:id)))" "(where * student (fn [rec] (> (\:id rec) 1)))" "(where* student (fn [rec] (> (\:id rec) 1)))" "(limit* tbl 1)" "(limit* student 1)" "\\r\\n(defn where* [data condition-func]\\r\\n  (if-not (empty? data)\\r\\n    (filter condition-func data)))" "(defn limit* [data lim]\\r\\n  (if-not (empty? data)\\r\\n    (take lim date)))" "(defn limit* [data lim]\\r\\n  (if-not (empty? data)\\r\\n    (take lim data)))" "(limit* student 1)" "(order-by* student \:year)" "(get {\:k 1} \:k)" "(get \:k {\:k 1})" "(join* (join* student-subject \:student_id student \:id) \:subject_id subject \:id)" "(get student-subject \:student_id)" "(join* (join* student-subject \:student_id student \:id) \:subject_id subject \:id)" "(join* student-subject \:student_id student \:id)" "(in-ns csvdb.core)" "(join* student-subject \:student_id student \:id)" "(println student-subject)" "(println stuedent)" "(println student)" "(select student)" "(join* student-subject \:student_id student \:id)" "(defn join* [data1 column1 data2 column2]\\r\\n  ;; 1. Start collecting results from empty collection.\\r\\n  ;; 2. Go through each element of data1.\\r\\n  ;; 3. For each element of data1 (lets call it element1) find all elements of data2 (lets call each as element2) where column1 \= column2.\\r\\n  ;; 4. Use function 'merge' and merge element1 with each element2.\\r\\n  ;; 5. Collect merged elements.\\r\\n  (reduce \\r\\n    (fn [acc1 x]\\r\\n      (println x)\\r\\n\\t    (conj acc1\\r\\n           (filter \#(\= (get %1 column2) (get x column1)) data2)))\\r\\n    ()\\r\\n    data1))" "(join* student-subject \:student_id student \:id)" "(defn join* [data1 column1 data2 column2]\\r\\n  ;; 1. Start collecting results from empty collection.\\r\\n  ;; 2. Go through each element of data1.\\r\\n  ;; 3. For each element of data1 (lets call it element1) find all elements of data2 (lets call each as element2) where column1 \= column2.\\r\\n  ;; 4. Use function 'merge' and merge element1 with each element2.\\r\\n  ;; 5. Collect merged elements.\\r\\n  (reduce \\r\\n    (fn [acc1 x]\\r\\n      ((println x)\\r\\n\\t    (conj acc1\\r\\n           (filter \#(\= (get %1 column2) (get x column1)) data2))))\\r\\n    ()\\r\\n    data1))" "(join* student-subject \:student_id student \:id)" "(println student-subject)" "(println student)" "(in-ns csvdb.core)" "(join* student-subject \:student_id student \:id)" "(pst)" "(in-ns csvdb.core)" "(pst)" "(println student-tbl)" "(join* student-subject \:student_id student \:id)" "(join* (join* student-subject \:student_id student \:id) \:subject_id subject \:id)" "(def data1 student-subject)" "(def data2 student)" "(def column1 \:student_id)" "(def column2 \:id)" "(println data1)" "(println data2)" "(reduce (fn [acc1 x] (conj acc1 (merge data1 (first (filter \#(\= (get % column2) (get x column1)) data))))))" "(reduce (fn [acc1 x] (conj acc1 (merge data1 (first (filter \#(\= (get % column2) (get x column1)) data2))))))" "(pst)" "(reduce (fn [acc1 x] (conj acc1 (merge data1 (first (filter \#(\= (get % column2) (get x column1))))))) data1)" "(reduce (fn [acc1 x] (conj acc1 (merge data1 (first (filter \#(\= (get % column2) (get x column1)) data2))))) () data1)" "(println data1)" "(filter \#(\= (get % column2) (get {\:subject_id 1, \:student_id 1} column1)) data2)" "(println student)" "(first ({\:surname \\"Ivanov\\", \:year 1998, \:id 1}))" "(f{\:surname \\"Ivanov\\", \:year 1998, \:id 1})" "(first (filter \#(\= (get % column2) (get {\:subject_id 1, \:student_id 1} column1)) data2))" "(merge data1 (first (filter \#(\= (get % column2) (get {\:subject_id 1, \:student_id 1} column1)) data2)))" "(join* (join* student-subject \:student_id student \:id) \:subject_id subject \:id)" "(perform-joins student-subject [[\:student_id student \:id] [\:subject_id subject \:id]])" "(println student)" "(select student)" "(-> student\\r\\n      (perform-joins joins))" "(perform-joins student-subject [[\:student_id student \:id] [\:subject_id subject \:id]])" "(-> student (perform-joins joins))" "(-> student (perform-joins joins*))" "(-> student (perform-joins join*))" "(join* student-subject \:student_id student \:id)" "(perform-joins student-subject [[\:student_id student \:id] [\:subject_id subject \:id]])" "(select student)"]
eclipse.preferences.version=1
